{
  "address": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "sequenceNumber",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "randomNumber",
          "type": "bytes32"
        }
      ],
      "name": "EntropyResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningTicket",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsPurchasedTotalBps",
          "type": "uint256"
        }
      ],
      "name": "JackpotRun",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "JackpotRunRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskPercentage",
          "type": "uint256"
        }
      ],
      "name": "LpDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principalAmount",
          "type": "uint256"
        }
      ],
      "name": "LpPrincipalWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "LpRebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "riskPercentage",
          "type": "uint256"
        }
      ],
      "name": "LpRiskPercentageAdjustment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        }
      ],
      "name": "LpStakeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserReferralFeeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsPurchasedTotalBps",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "UserTicketPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserWinWithdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "randomNumber",
          "type": "bytes32"
        }
      ],
      "name": "_entropyCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeLpAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowPurchasing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "lpAddresses",
          "type": "address[]"
        }
      ],
      "name": "deactivateInactiveLPs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entropyCallbackLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceReleaseJackpotLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getJackpotFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_entropyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwnerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jackpotLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastJackpotEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastWinnerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "riskPercentage",
          "type": "uint256"
        }
      ],
      "name": "lpAdjustRiskPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "riskPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "lpDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpPoolCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpPoolTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpsInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "riskPercentage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLpDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "purchaseTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralFeesClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralFeesTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundDurationInSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userRandomNumber",
          "type": "bytes32"
        }
      ],
      "name": "runJackpot",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "setAllowPurchasing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fallbackWinner",
          "type": "address"
        }
      ],
      "name": "setFallbackWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBps",
          "type": "uint256"
        }
      ],
      "name": "setFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lpLimit",
          "type": "uint256"
        }
      ],
      "name": "setLpLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setLpPoolCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinLpDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeAddress",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeThreshold",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeeThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_referralFeeBps",
          "type": "uint256"
        }
      ],
      "name": "setReferralFeeBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newDuration",
          "type": "uint256"
        }
      ],
      "name": "setRoundDurationInSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTicketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_userLimit",
          "type": "uint256"
        }
      ],
      "name": "setUserLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketCountTotalBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userPoolTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ticketsPurchasedTotalBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "winningsClaimable",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProtocolFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawReferralFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawWinnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x61b1a0c5e2996eab9a86d65bda722d2cf368edae59cd2b45d0aaa046742ccaf7",
  "receipt": {
    "to": null,
    "from": "0x4cacfA4B61105852580BA184b6466FD9952654ce",
    "contractAddress": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
    "transactionIndex": 4,
    "gasUsed": "2952020",
    "logsBloom": "0x
    "blockHash": "0x3ffe0e08cd52899f77459a1712af9eaf9977c40d2cfbe7c676d6732a43583012",
    "transactionHash": "0x61b1a0c5e2996eab9a86d65bda722d2cf368edae59cd2b45d0aaa046742ccaf7",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 140411032,
        "transactionHash": "0x61b1a0c5e2996eab9a86d65bda722d2cf368edae59cd2b45d0aaa046742ccaf7",
        "address": "0x3EA4857E2402D9671a7289233024f00728Fa8314",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 14,
        "blockHash": "0x3ffe0e08cd52899f77459a1712af9eaf9977c40d2cfbe7c676d6732a43583012"
      }
    ],
    "blockNumber": 140411032,
    "cumulativeGasUsed": "3247012",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3285774ee26c4676125499d0ec3f658d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"randomNumber\",\"type\":\"bytes32\"}],\"name\":\"EntropyResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningTicket\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsPurchasedTotalBps\",\"type\":\"uint256\"}],\"name\":\"JackpotRun\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"JackpotRunRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskPercentage\",\"type\":\"uint256\"}],\"name\":\"LpDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"LpPrincipalWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"LpRebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskPercentage\",\"type\":\"uint256\"}],\"name\":\"LpRiskPercentageAdjustment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"LpStakeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserReferralFeeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsPurchasedTotalBps\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"UserTicketPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWinWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"randomNumber\",\"type\":\"bytes32\"}],\"name\":\"_entropyCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeLpAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowPurchasing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"lpAddresses\",\"type\":\"address[]\"}],\"name\":\"deactivateInactiveLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropyCallbackLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceReleaseJackpotLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entropyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastJackpotEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWinnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"riskPercentage\",\"type\":\"uint256\"}],\"name\":\"lpAdjustRiskPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"riskPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"lpDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLpDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"purchaseTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFeesClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDurationInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userRandomNumber\",\"type\":\"bytes32\"}],\"name\":\"runJackpot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setAllowPurchasing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallbackWinner\",\"type\":\"address\"}],\"name\":\"setFallbackWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpLimit\",\"type\":\"uint256\"}],\"name\":\"setLpLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setLpPoolCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinLpDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeAddress\",\"type\":\"address\"}],\"name\":\"setProtocolFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeThreshold\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralFeeBps\",\"type\":\"uint256\"}],\"name\":\"setReferralFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setRoundDurationInSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTicketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userLimit\",\"type\":\"uint256\"}],\"name\":\"setUserLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCountTotalBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userPoolTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketsPurchasedTotalBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningsClaimable\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawWinnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"initialize(address,address,address,uint256)\":{\"details\":\"Initializes the contract with required parameters\",\"params\":{\"_entropyAddress\":\"Address of the Entropy contract for randomness\",\"_initialOwnerAddress\":\"Initial owner address (should be different from deployer)\",\"_ticketPrice\":\"Price of a single ticket (will be multiplied by token decimals)\",\"_token\":\"Address of the ERC20 token to use for tickets and rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseJackpot.sol\":\"BaseJackpot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This extension of the {Ownable} contract includes a two-step mechanism to transfer\\n * ownership, where the new owner must call {acceptOwnership} in order to replace the\\n * old one. This can help prevent common mistakes, such as transfers of ownership to\\n * incorrect accounts, or to contracts that are unable to interact with the\\n * permission system.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     *\\n     * Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xe9570c90b688339474e80090b0cdf0b2c85c25aa28cc6044d489dda9efc2c716\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/BaseJackpot.sol\":{\"content\":\"// SPDX-License-Identifier:  BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nimport {IEntropyConsumer} from \\\"./interfaces/IEntropyConsumer.sol\\\";\\nimport {IEntropy} from \\\"./interfaces/IEntropy.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BaseJackpot is\\n    Initializable,\\n    Ownable2StepUpgradeable,\\n    UUPSUpgradeable,\\n    IEntropyConsumer\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // Randomness variables\\n    IEntropy private entropy;\\n    address private entropyProvider;\\n\\n    // State variables\\n\\n      struct LP {\\n        uint256 principal;\\n        uint256 stake;\\n        uint256 riskPercentage; // From 0 to 100\\n        // Whether or not the LP has principal stored in the contract\\n        bool active;\\n    }\\n\\n    mapping(address => User) public usersInfo;\\n    mapping(address => LP) public lpsInfo;\\n    // array to keep track of active user addresses for current jackpot, resets on each jackpot run\\n    // user addresses are added when they purchase tickets\\n    // user addresses are removed when the jackpot is run\\n    address[] private activeUserAddresses;\\n    // array to keep track of active LP addresses, does not reset on jackpot run\\n    // lp addresses are added when they become active (by depositing)\\n    // lp addresses are removed when they become inactive (by withdrawing)\\n    address[] public activeLpAddresses;\\n\\n    // JACKPOT VARIABLES\\n    // ticket price in Szabo (6 decimals)\\n    uint256 public ticketPrice;\\n    // round duration in seconds\\n    uint256 public roundDurationInSeconds;\\n    // timestamp of the last jackpot end time\\n    uint256 public lastJackpotEndTime;\\n    // total amount in LP pool\\n    uint256 public lpPoolTotal;\\n    // cap for LP pool/stake (not total LP assets or deposits)\\n    uint256 public lpPoolCap;\\n    // total amount in user pool of token\\n    uint256 public userPoolTotal;\\n    // total tickets purchased by players, post-fee, multiplied by 10000, does not include LP tickets\\n    uint256 public ticketCountTotalBps;\\n    // most recent winner's address\\n    address public lastWinnerAddress;\\n    // set to true when run jackpot is initiated, if true, jackpot cannot be run twice\\n    bool public jackpotLock;\\n    // set to true when entropy callback has been run, if true, entropy callback cannot be run twice\\n    bool public entropyCallbackLock;\\n\\n    // LP FEE AND REFERRAL FEE SETTINGS AND VARIABLES\\n    uint256 public feeBps;\\n    // total fee amount for both LP's and referrals\\n    uint256 public allFeesTotal;\\n    // total amount given to LP's via fees\\n    uint256 public lpFeesTotal;\\n    // fee Bps for referrals\\n    uint256 public referralFeeBps;\\n    // total referral fees allocated across all referrers\\n    uint256 public referralFeesTotal;\\n    // how much each referrer has received in referral fees\\n    mapping(address => uint256) public referralFeesClaimable;\\n    // Protocol fee address, see conditions below when this applies\\n    address public protocolFeeAddress;\\n    // Amount of protocol fees claimable\\n    uint256 public protocolFeeClaimable;\\n    // Fallback address in case winner is not found\\n    address public fallbackWinner;\\n    // Limit for number of active LPs\\n    uint256 public lpLimit;\\n    // Minimum amount LPs can deposit\\n    uint256 public minLpDeposit;\\n    // Limit for number of active users\\n    uint256 public userLimit;\\n    // Pause ticket purchasing\\n    bool public allowPurchasing;\\n    // Token to use\\n    IERC20 public token;\\n    // Number of decimals for the token\\n    uint256 public tokenDecimals;\\n    // Threshold after which protocol starts taking fees\\n    uint256 public protocolFeeThreshold;\\n\\n    // Gap for future upgrades\\n    uint256[50] private __gap;\\n\\n    // EVENTS\\n    event UserTicketPurchase(\\n        address indexed recipient,\\n        uint256 ticketsPurchasedTotalBps,\\n        address indexed referrer,\\n        address indexed buyer\\n    );\\n    event UserWinWithdrawal(address indexed user, uint256 amount);\\n    event UserReferralFeeWithdrawal(address indexed user, uint256 amount);\\n    event ProtocolFeeWithdrawal(uint256 amount);\\n\\n    event LpDeposit(\\n        address indexed lpAddress,\\n        uint256 amount,\\n        uint256 riskPercentage\\n    );\\n    event LpPrincipalWithdrawal(\\n        address indexed lpAddress,\\n        uint256 principalAmount\\n    );\\n    event JackpotRunRequested(address indexed user);\\n    event JackpotRun(\\n        uint256 time,\\n        address winner,\\n        uint256 winningTicket,\\n        uint256 winAmount,\\n        uint256 ticketsPurchasedTotalBps\\n    );\\n    event EntropyResult(uint64 sequenceNumber, bytes32 randomNumber);\\n    event LpStakeWithdrawal(address indexed lpAddress);\\n    event LpRebalance(\\n        address indexed lpAddress,\\n        uint256 principal,\\n        uint256 stake\\n    );\\n    event LpRiskPercentageAdjustment(\\n        address indexed lpAddress,\\n        uint256 riskPercentage\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function _authorizeUpgrade(\\n        address newImplementation\\n    ) internal override onlyOwner {}\\n\\n\\n\\n    struct User {\\n        // Total tickets purchased by the user for current jackpot, multiplied by 10000, resets each jackpot\\n        uint256 ticketsPurchasedTotalBps;\\n        // Tracks the total win amount in token (how much the user can withdraw.)\\n        uint256 winningsClaimable;\\n        // Whether or not the user is participating in the current jackpot\\n        bool active;\\n    }\\n\\n    /****************************\\n     *                          *\\n     *      ADMIN CONTROLS      *\\n     *                          *\\n     ****************************/\\n\\n    // Set the ticket price in Szabo (6 decimals)\\n    function setTicketPrice(uint256 _newTicketPrice) external onlyOwner {\\n        ticketPrice = _newTicketPrice;\\n    }\\n\\n    // Set the round duration in seconds\\n    function setRoundDurationInSeconds(\\n        uint256 _newDuration\\n    ) external onlyOwner {\\n        roundDurationInSeconds = _newDuration;\\n    }\\n\\n    // Set the referral fee in basis points\\n    function setReferralFeeBps(uint256 _referralFeeBps) external onlyOwner {\\n        require(\\n            _referralFeeBps <= feeBps,\\n            \\\"Referral bps should not exceed fee bps\\\"\\n        );\\n        referralFeeBps = _referralFeeBps;\\n    }\\n\\n    // Set the fee in basis points\\n    function setFeeBps(uint256 _feeBps) external onlyOwner {\\n        require(_feeBps <= 8000, \\\"Fee bps should not exceed 8000\\\");\\n        require(\\n            referralFeeBps + 500 <= _feeBps,\\n            \\\"Referral bps should be less than fee bps by 500\\\"\\n        );\\n        feeBps = _feeBps;\\n    }\\n\\n    // Set the cap for LP pool/stake in Szabo (6 decimals)\\n    function setLpPoolCap(uint256 _cap) external onlyOwner {\\n        lpPoolCap = _cap;\\n    }\\n\\n    // Set the protocol fee address\\n    function setProtocolFeeAddress(\\n        address _protocolFeeAddress\\n    ) external onlyOwner {\\n        protocolFeeAddress = _protocolFeeAddress;\\n    }\\n\\n    // Set the protocol fee threshold\\n    // ex: 20000000000 = 20000 USDC (6 decimal places)\\n    function setProtocolFeeThreshold(\\n        uint256 _protocolFeeThreshold\\n    ) external onlyOwner {\\n        protocolFeeThreshold = _protocolFeeThreshold;\\n    }\\n\\n    // break glass mechanism in case entropy contract does not callback\\n    function forceReleaseJackpotLock() external onlyOwner {\\n        jackpotLock = false;\\n    }\\n\\n    // Set the fallback winner address\\n    function setFallbackWinner(address _fallbackWinner) external onlyOwner {\\n        fallbackWinner = _fallbackWinner;\\n    }\\n\\n    // Set the LP limit\\n    function setLpLimit(uint256 _lpLimit) external onlyOwner {\\n        lpLimit = _lpLimit;\\n    }\\n\\n    // Set the user limit\\n    function setUserLimit(uint256 _userLimit) external onlyOwner {\\n        userLimit = _userLimit;\\n    }\\n\\n    // Set the minimum LP deposit in Szabo (6 decimals)\\n    function setMinLpDeposit(uint256 _minDeposit) external onlyOwner {\\n        minLpDeposit = _minDeposit;\\n    }\\n\\n    // Set the allow purchasing flag\\n    function setAllowPurchasing(bool _allow) external onlyOwner {\\n        allowPurchasing = _allow;\\n    }\\n\\n    // Allows admin to deactivate LPs with 0 risk and stake\\n    function deactivateInactiveLPs(\\n        address[] calldata lpAddresses\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < lpAddresses.length; i++) {\\n            address lpAddress = lpAddresses[i];\\n            LP storage lp = lpsInfo[lpAddress];\\n\\n            // Check if LP is active and has 0 risk and stake\\n            require(lp.active, \\\"LP is not active\\\");\\n            require(lp.riskPercentage == 0, \\\"LP risk percentage not 0\\\");\\n            require(lp.stake == 0, \\\"LP stake not 0\\\");\\n\\n            // Find LP address index in activeLpAddresses\\n            int256 lpIndex = -1;\\n            for (uint256 j = 0; j < activeLpAddresses.length; j++) {\\n                if (activeLpAddresses[j] == lpAddress) {\\n                    lpIndex = int256(j);\\n                    break;\\n                }\\n            }\\n            require(lpIndex != -1, \\\"LP index not found\\\");\\n\\n            // Remove LP address from activeLpAddresses\\n            activeLpAddresses[uint256(lpIndex)] = activeLpAddresses[\\n                activeLpAddresses.length - 1\\n            ];\\n            activeLpAddresses.pop();\\n\\n            // Transfer any remaining principal back to the LP\\n            uint256 principalAmount = lp.principal;\\n\\n            lp.active = false;\\n            if (principalAmount > 0) {\\n                // Reset numbers first to prevent re-entrance\\n                lp.principal = 0;\\n\\n                // Transfer the principal back to the LP\\n                token.safeTransfer(lpAddress, principalAmount);\\n            }\\n\\n            emit LpPrincipalWithdrawal(lpAddress, principalAmount);\\n        }\\n    }\\n\\n\\n/* This builds upon a MIT-licensed contract by the PEVL hackathon team, led by Patrick Lung, deployed on testnet at 0x0278a964dC3275274bD845B936cE2e0b09c8B827\\nThe contract was modified significantly by Patrick Lung and other collaborators, and last deployed with MIT license at 0xf9d524576646d718e4f5f5bade17082d9ecf25d0\\nAny changes not in the above MIT-licensed contracts are under BUSL-1.1.\\n\\nBusiness Source License 1.1\\n\\nLicense text copyright (c) 2017 MariaDB Corporation Ab, All Rights Reserved.\\n\\\"Business Source License\\\" is a trademark of MariaDB Corporation Ab.\\n\\n-----------------------------------------------------------------------------\\n\\nParameters\\n\\nLicensor:             Coordination Inc.\\n\\nLicensed Work:        Megapot Jackpot (BaseJackpot.sol)\\n                      The Licensed Work is (c) 2025 Coordination Inc.\\n\\nChange Date: 2028-05-27\\n\\nChange License: GNU General Public License v2.0 or later\\n*/\\n\\n    // PUBLIC WITHDRAWAL FUNCTIONS\\n\\n    // Called by a user to withdraw their jackpot winnings\\n    function withdrawWinnings() public {\\n        User storage user = usersInfo[msg.sender];\\n\\n        require(user.winningsClaimable > 0, \\\"No winnings to withdraw\\\");\\n\\n        uint256 transferAmount = user.winningsClaimable;\\n        emit UserWinWithdrawal(msg.sender, transferAmount);\\n        // Reset stored amount before sending to prevent re-entrance\\n        user.winningsClaimable = 0;\\n\\n        // Transfer the winnings to the user\\n        token.safeTransfer(msg.sender, transferAmount);\\n    }\\n\\n    // Called by a user to withdraw their referral fees\\n    function withdrawReferralFees() public {\\n        require(\\n            referralFeesClaimable[msg.sender] > 0,\\n            \\\"No referral fees to withdraw\\\"\\n        );\\n\\n        uint256 transferAmount = referralFeesClaimable[msg.sender];\\n        // Reset stored amount before sending to prevent re-entrance\\n        referralFeesClaimable[msg.sender] = 0;\\n\\n        // Transfer the referral fees to the user\\n        token.safeTransfer(msg.sender, transferAmount);\\n\\n        emit UserReferralFeeWithdrawal(msg.sender, transferAmount);\\n    }\\n\\n    // Only callable by owner to withdraw protocol fees to protocolFeeAddress\\n    function withdrawProtocolFees() external onlyOwner {\\n        require(protocolFeeClaimable > 0, \\\"No protocol fees to withdraw\\\");\\n\\n        uint256 transferProtocolFeeAmount = protocolFeeClaimable;\\n        // Reset stored amount before sending to prevent re-entrance\\n        protocolFeeClaimable = 0;\\n\\n        // Transfer the protocol fees to the protocol fee address\\n        require(\\n            protocolFeeAddress != address(0),\\n            \\\"Protocol fee address not set\\\"\\n        );\\n\\n        token.safeTransfer(protocolFeeAddress, transferProtocolFeeAmount);\\n\\n        emit ProtocolFeeWithdrawal(protocolFeeClaimable);\\n    }\\n\\n    // Called by an LP to withdrawl all of their principal when they have nothing staked in the LP pool for the current jackpot.\\n    // If the LP has a positive amount staked in the current LP pool, we will set their riskPercentage to 0 so they will be able\\n    // to withdraw after the current jackpot finishes (by calling this function again).\\n    function withdrawAllLP() public {\\n        LP storage lp = lpsInfo[msg.sender];\\n\\n        // Ensure the LP is active\\n        require(lp.active, \\\"LP is not active\\\");\\n\\n        // Ensure the LP does not have anything staked in the current jackpot\\n        // If they do, then set their risk percentage to 0 so they can withdraw after the current jackpot finishes\\n        if (lp.stake > 0) {\\n            lp.riskPercentage = 0;\\n            emit LpStakeWithdrawal(msg.sender);\\n            return;\\n        }\\n        // LP has 0 stake now so it's ok to proceed with the withdrawal\\n\\n        uint256 principalAmount = lp.principal;\\n        // Reset numbers first to prevent re-entrance\\n        lp.riskPercentage = 0;\\n        lp.principal = 0;\\n        lp.active = false;\\n\\n        // Find LP address index in activeLpAddresses\\n        int256 lpIndex = -1;\\n        for (uint256 i = 0; i < activeLpAddresses.length; i++) {\\n            if (activeLpAddresses[i] == msg.sender) {\\n                lpIndex = int256(i);\\n                break;\\n            }\\n        }\\n        require(lpIndex != -1, \\\"LP index not found\\\");\\n\\n        // Remove LP address from activeLpAddresses (by replacing it with the last element and popping the last element)\\n        activeLpAddresses[uint256(lpIndex)] = activeLpAddresses[\\n            activeLpAddresses.length - 1\\n        ];\\n        activeLpAddresses.pop();\\n\\n        // Transfer the principal back to the LP\\n        token.safeTransfer(msg.sender, principalAmount);\\n\\n        emit LpPrincipalWithdrawal(msg.sender, principalAmount);\\n    }\\n\\n    // Helper function to handle fee calculations\\n    function _calculateFees(\\n        uint256 usedAmount,\\n        address referrer\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 allFeeAmount,\\n            uint256 referralFeeAmount,\\n            uint256 lpFeeAmount\\n        )\\n    {\\n        allFeeAmount = (usedAmount * feeBps) / 10000;\\n        referralFeeAmount = (referrer != address(0))\\n            ? (usedAmount * referralFeeBps) / 10000\\n            : 0;\\n        lpFeeAmount = allFeeAmount - referralFeeAmount;\\n        return (allFeeAmount, referralFeeAmount, lpFeeAmount);\\n    }\\n\\n    // Helper function to update fee totals\\n    function _updateFeeTotals(\\n        uint256 allFeeAmount,\\n        uint256 referralFeeAmount,\\n        uint256 lpFeeAmount,\\n        address referrer\\n    ) internal {\\n        allFeesTotal += allFeeAmount;\\n        if (referrer != address(0)) {\\n            referralFeesClaimable[referrer] += referralFeeAmount;\\n            referralFeesTotal += referralFeeAmount;\\n        }\\n        lpFeesTotal += lpFeeAmount;\\n    }\\n\\n    // Helper function to process the ticket purchase\\n    function _processTicketPurchase(\\n        uint256 actualReceived,\\n        address userAddress\\n    ) internal returns (uint256 ticketsPurchasedBps, uint256 usedAmount) {\\n        uint256 ticketCount = actualReceived / ticketPrice;\\n        require(\\n            ticketCount > 0,\\n            \\\"Insufficient amount for minimum ticket purchase\\\"\\n        );\\n\\n        usedAmount = ticketCount * ticketPrice;\\n        ticketsPurchasedBps = ticketCount * (10000 - feeBps);\\n\\n        User storage user = usersInfo[userAddress];\\n        if (!user.active) {\\n            require(\\n                activeUserAddresses.length < userLimit,\\n                \\\"Max user limit reached\\\"\\n            );\\n            user.active = true;\\n            activeUserAddresses.push(userAddress);\\n        }\\n\\n        user.ticketsPurchasedTotalBps += ticketsPurchasedBps;\\n        ticketCountTotalBps += ticketsPurchasedBps;\\n\\n        return (ticketsPurchasedBps, usedAmount);\\n    }\\n\\n    // PUBLIC DEPOSIT / PURCHASE FUNCTIONS\\n\\n    // Called by LP to: deposit initial principal, deposit more principal\\n    // Adjusts principal and riskPercentage instantly\\n    // Does not take adjust stake amount or pool size until next run\\n    function lpDeposit(uint256 riskPercentage, uint256 value) public {\\n        // Make sure riskPercentage is between 1 and 100\\n        require(\\n            riskPercentage > 0 && riskPercentage <= 100,\\n            \\\"Invalid risk percentage\\\"\\n        );\\n\\n        // Make sure jackpot is not running\\n        require(!jackpotLock, \\\"Jackpot is currently running!\\\");\\n\\n        // Make sure deposit amount is positive\\n        require(value > 0, \\\"Invalid deposit amount, must be positive\\\");\\n\\n        // Get balance before transfer\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n\\n        // Transfer the tokens\\n        token.safeTransferFrom(msg.sender, address(this), value);\\n\\n        // Calculate actual received amount after transfer fees\\n        uint256 balanceAfter = token.balanceOf(address(this));\\n\\n        // Calculate actual received amount after transfer fees\\n        uint256 actualReceived = balanceAfter - balanceBefore;\\n\\n        // Floor the actual received amount to the nearest ticket price\\n        uint256 flooredValue = (actualReceived / ticketPrice) * ticketPrice;\\n\\n        // New LP checks\\n        if (!lpsInfo[msg.sender].active) {\\n            // We have too many LPs already, so we can't add another one\\n            require(activeLpAddresses.length < lpLimit, \\\"Max LP limit reached\\\");\\n\\n            // Make sure deposit amount is greater than minimum deposit amount\\n            require(\\n                flooredValue >= minLpDeposit,\\n                \\\"LP deposit less than minimum\\\"\\n            );\\n        }\\n\\n        // Make sure floored deposit amount is equal to or greater than ticket price\\n        require(\\n            flooredValue >= ticketPrice,\\n            \\\"Invalid deposit amount, must be greater than ticket price\\\"\\n        );\\n\\n        // Make sure deposit amount does not exceed LP pool cap\\n        require(\\n            lpPoolTotal + flooredValue <= lpPoolCap,\\n            \\\"Deposit exceeds LP pool cap\\\"\\n        );\\n\\n        // EFFECTS\\n        LP storage lp = lpsInfo[msg.sender];\\n\\n        if (!lp.active) {\\n            lp.active = true;\\n            activeLpAddresses.push(msg.sender);\\n        }\\n\\n        lp.principal += flooredValue;\\n        lp.riskPercentage = riskPercentage;\\n\\n        // If there's any remainder after flooring, send it back to the user\\n        uint256 remainder = actualReceived - flooredValue;\\n        if (remainder > 0) {\\n            token.safeTransfer(msg.sender, remainder);\\n        }\\n\\n        emit LpDeposit(msg.sender, flooredValue, riskPercentage);\\n    }\\n\\n    function lpAdjustRiskPercentage(uint256 riskPercentage) public {\\n        require(\\n            riskPercentage > 0 && riskPercentage <= 100,\\n            \\\"Invalid risk percentage\\\"\\n        );\\n        require(!jackpotLock, \\\"Jackpot is currently running!\\\");\\n\\n        LP storage lp = lpsInfo[msg.sender];\\n        require(lp.active, \\\"LP is not active\\\");\\n\\n        // Adjusts riskPercentage\\n        lp.riskPercentage = riskPercentage;\\n\\n        emit LpRiskPercentageAdjustment(msg.sender, riskPercentage);\\n    }\\n\\n    // Purchase tickets for user\\n\\n    // To purchase tickets for yourself, set recipient to null or your own address (msg.sender)\\n    // To purchase tickets for someone else, set recipient to the recipient's address.\\n    // Recipient field enables gifting tickets by users or apps for giveaways.\\n    // It also enables the flow to pay with any token cross-chain or with fiat.\\n    function purchaseTickets(\\n        address referrer,\\n        uint256 value,\\n        address recipient\\n    ) public {\\n        require(allowPurchasing, \\\"Purchasing tickets not allowed\\\");\\n        require(value > 0, \\\"Invalid purchase amount, must be positive\\\");\\n        require(!jackpotLock, \\\"Jackpot is currently running!\\\");\\n        require(referrer != msg.sender, \\\"Cannot refer yourself\\\");\\n\\n        uint256 balanceBefore = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), value);\\n        uint256 actualReceived = token.balanceOf(address(this)) - balanceBefore;\\n\\n        address userAddress = (recipient == address(0) ||\\n            recipient == msg.sender)\\n            ? msg.sender\\n            : recipient;\\n\\n        (\\n            uint256 ticketsPurchasedBps,\\n            uint256 usedAmount\\n        ) = _processTicketPurchase(actualReceived, userAddress);\\n\\n        (\\n            uint256 allFeeAmount,\\n            uint256 referralFeeAmount,\\n            uint256 lpFeeAmount\\n        ) = _calculateFees(usedAmount, referrer);\\n        _updateFeeTotals(\\n            allFeeAmount,\\n            referralFeeAmount,\\n            lpFeeAmount,\\n            referrer\\n        );\\n\\n        userPoolTotal += usedAmount - allFeeAmount;\\n\\n        uint256 remainder = actualReceived - usedAmount;\\n        if (remainder > 0) {\\n            token.safeTransfer(msg.sender, remainder);\\n        }\\n\\n        emit UserTicketPurchase(\\n            userAddress,\\n            ticketsPurchasedBps,\\n            referrer,\\n            msg.sender\\n        );\\n    }\\n    \\n    /********************\\n     *                  *\\n     *      JACKPOT     *\\n     *                  *\\n     ********************/\\n\\n    function distributeLpFeesToLps() private {\\n        if (lpPoolTotal == 0) {\\n            // if no LPs have staked, distribute LP fees to the user pool\\n            userPoolTotal += lpFeesTotal;\\n            lpFeesTotal = 0;\\n            return;\\n        }\\n\\n        if (\\n            protocolFeeAddress != address(0) &&\\n            lpFeesTotal >= protocolFeeThreshold\\n        ) {\\n            uint256 protocolFee = lpFeesTotal / 10;\\n            lpFeesTotal -= protocolFee;\\n            protocolFeeClaimable += protocolFee;\\n        }\\n\\n        uint256 totalDistributed = 0;\\n        for (uint256 i = 0; i < activeLpAddresses.length; i++) {\\n            address lpAddress = activeLpAddresses[i];\\n            LP storage lp = lpsInfo[lpAddress];\\n            if (lp.active) {\\n                // Calculate proportion of lp.stake to lpPoolTotal, applied to lpFeesTotal, with minimized precision loss\\n                uint256 lpFeesShare = ((lpFeesTotal *\\n                    (10 ** tokenDecimals) *\\n                    lp.stake) / lpPoolTotal) / (10 ** tokenDecimals);\\n                lp.principal = lp.principal + lpFeesShare;\\n                totalDistributed += lpFeesShare;\\n            }\\n        }\\n\\n        // Update lpFeesTotal to only contain the undistributed amount\\n        lpFeesTotal = lpFeesTotal - totalDistributed;\\n        // This remainder will automatically roll over to the next lottery since we don't reset lpFeesTotal\\n    }\\n\\n    // Distribute the user pool to LP's according to their stake share of the LP pool\\n    function distributeUserPoolToLps() private {\\n        // TODO: handle this more elegantly + refactor lp.active\\n        if (lpPoolTotal == 0) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < activeLpAddresses.length; i++) {\\n            address lpAddress = activeLpAddresses[i];\\n            LP storage lp = lpsInfo[lpAddress];\\n            if (lp.active) {\\n                // Calculate proportion of lp.stake to lpPoolTotal, applied to userPoolTotal, with minimized precision loss\\n                uint256 userPoolShare = ((userPoolTotal *\\n                    (10 ** tokenDecimals) *\\n                    lp.stake) / lpPoolTotal) / (10 ** tokenDecimals);\\n                lp.principal = lp.principal + userPoolShare;\\n            }\\n        }\\n    }\\n\\n    // Return the LP pool back to LP's (LP's do not lose any money)\\n    // Make sure that distributeUserPoolToLps() is never called before this\\n    function returnLpPoolBackToLps() private {\\n        for (uint256 i = 0; i < activeLpAddresses.length; i++) {\\n            address lpAddress = activeLpAddresses[i];\\n            LP storage lp = lpsInfo[lpAddress];\\n            // Add each LP's stake back to their principal\\n            if (lp.active) {\\n                lp.principal += lp.stake;\\n                lp.stake = 0;\\n            }\\n        }\\n    }\\n\\n    // Move each LP's stake from LP principal to the LP pool according to their risk percentage\\n    function stakeLps() private {\\n        for (uint256 i = 0; i < activeLpAddresses.length; i++) {\\n            address lpAddress = activeLpAddresses[i];\\n            LP storage lp = lpsInfo[lpAddress];\\n            if (lp.active) {\\n                // lp.principal is always dividable by 100\\n                uint256 principal = lp.principal;\\n                uint256 stake = (principal * lp.riskPercentage) / 100;\\n                lp.stake = stake;\\n                // lp.stake is always non-negative\\n                lpPoolTotal += stake;\\n                lp.principal = principal - stake;\\n\\n                emit LpRebalance(lpAddress, lp.principal, stake);\\n            }\\n        }\\n    }\\n\\n    function clearUserTicketPurchases() private {\\n        for (uint256 i = 0; i < activeUserAddresses.length; i++) {\\n            address userAddress = activeUserAddresses[i];\\n            usersInfo[userAddress].ticketsPurchasedTotalBps = 0;\\n            usersInfo[userAddress].active = false;\\n        }\\n        // After resetting usersInfo, reset the activeUserAddresses array\\n        delete activeUserAddresses;\\n    }\\n\\n    // Get the fee for making the entropy contract call\\n    function getJackpotFee() public view returns (uint256 fee) {\\n        fee = entropy.getFee(entropyProvider);\\n    }\\n\\n    // MAIN PUBLIC FUNCTION TO RUN THE JACKPOT\\n    // Runs the Jackpot\\n    function runJackpot(bytes32 userRandomNumber) external payable {\\n        // TIMELOCK\\n        require(\\n            block.timestamp >= lastJackpotEndTime + roundDurationInSeconds,\\n            \\\"Jackpot can only be run once a day\\\"\\n        );\\n\\n        require(!jackpotLock, \\\"Jackpot is currently running!\\\");\\n\\n        // acquire jackpot lock\\n        jackpotLock = true;\\n\\n        uint256 fee = entropy.getFee(entropyProvider);\\n        require(msg.value >= fee, \\\"Insufficient gas to generate random number\\\");\\n        if (msg.value > fee) {\\n            (bool success, ) = msg.sender.call{value: msg.value - fee}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n\\n        // Request the random number from the Entropy protocol. The call returns a sequence number that uniquely\\n        // identifies the generated random number. Callers can use this sequence number to match which request\\n        // is being revealed in the next stage of the protocol. Since we lock the call to this function,\\n        // we don't need to care about the sequence number\\n        entropy.requestWithCallback{value: fee}(\\n            entropyProvider,\\n            userRandomNumber\\n        );\\n\\n        emit JackpotRunRequested(msg.sender);\\n    }\\n\\n    function getWinningTicket(\\n        bytes32 rawRandomNumber,\\n        uint256 max\\n    ) private pure returns (uint256) {\\n        return (uint256(rawRandomNumber) % max) + 1;\\n    }\\n\\n    function findWinnerFromUsers(\\n        uint256 winningTicket\\n    ) private view returns (address) {\\n        uint256 cumulativeTicketsBps = 0;\\n        for (uint256 i = 0; i < activeUserAddresses.length; i++) {\\n            address userAddress = activeUserAddresses[i];\\n            cumulativeTicketsBps += usersInfo[userAddress]\\n                .ticketsPurchasedTotalBps;\\n            if (winningTicket <= cumulativeTicketsBps) {\\n                return userAddress;\\n            }\\n        }\\n        // No winner found, this should never happen\\n        return fallbackWinner;\\n    }\\n\\n    // Determines a winner, and adjusts LP's principal/stake accordingly\\n    function determineWinnerAndAdjustStakes(bytes32 randomNumber) private {\\n        lastJackpotEndTime = block.timestamp;\\n\\n        // No tickets bought\\n        if (ticketCountTotalBps == 0) {\\n            emit JackpotRun(lastJackpotEndTime, address(0), 0, lpPoolTotal, 0);\\n            // Return LP Pool back to LPs\\n            returnLpPoolBackToLps();\\n            // Reset LP Pool before iniitalizing pool again\\n            lpPoolTotal = 0;\\n            stakeLps();\\n            return;\\n        }\\n\\n        // Distribute LP fees to LP's\\n        distributeLpFeesToLps();\\n\\n        if (userPoolTotal >= lpPoolTotal) {\\n            // Jackpot is fully funded by users, so winner gets the user pool and LP's get the LP pool\\n            uint256 winningTicket = getWinningTicket(\\n                randomNumber,\\n                ticketCountTotalBps\\n            );\\n            lastWinnerAddress = findWinnerFromUsers(winningTicket);\\n            // Calculate and store win amount, which is user pool, fees are already deducted\\n            uint256 winAmount = userPoolTotal;\\n            User storage winner = usersInfo[lastWinnerAddress];\\n            winner.winningsClaimable += winAmount;\\n            // Return the LP pool back to the LP's\\n            returnLpPoolBackToLps();\\n            emit JackpotRun(\\n                lastJackpotEndTime,\\n                lastWinnerAddress,\\n                winningTicket,\\n                winAmount,\\n                winner.ticketsPurchasedTotalBps\\n            );\\n        } else {\\n            // Jackpot is not fully funded by users, i.e. partially funded by LP's\\n            uint256 winningTicket = getWinningTicket(\\n                randomNumber,\\n                (lpPoolTotal * 10000) / ticketPrice\\n            );\\n            if (winningTicket <= ticketCountTotalBps) {\\n                // Jackpot is won by a user, so winner gets the LP pool and LP's get the user pool (but lose the LP pool)\\n                lastWinnerAddress = findWinnerFromUsers(winningTicket);\\n                // Distribute LP pool\\n                uint256 winAmount = lpPoolTotal;\\n                User storage winner = usersInfo[lastWinnerAddress];\\n                winner.winningsClaimable += winAmount;\\n                // Distribute user pool to the LP's\\n                distributeUserPoolToLps();\\n                emit JackpotRun(\\n                    lastJackpotEndTime,\\n                    lastWinnerAddress,\\n                    winningTicket,\\n                    winAmount,\\n                    winner.ticketsPurchasedTotalBps\\n                );\\n            } else {\\n                // Jackpot is won by LP's, so LP's get both the user pool and LP pool\\n                lastWinnerAddress = address(0);\\n                // Distribute user pool to the LP's\\n                distributeUserPoolToLps();\\n                returnLpPoolBackToLps();\\n                emit JackpotRun(\\n                    lastJackpotEndTime,\\n                    lastWinnerAddress,\\n                    winningTicket,\\n                    lpPoolTotal,\\n                    0\\n                );\\n            }\\n        }\\n\\n        // Reset ticket purchases and jackpot variables for the next round\\n        clearUserTicketPurchases();\\n        userPoolTotal = 0;\\n        lpPoolTotal = 0;\\n        ticketCountTotalBps = 0;\\n        // Reset fee accumulators, LP fee total reset in its own function\\n        allFeesTotal = 0;\\n        referralFeesTotal = 0;\\n        // Stake the LP's\\n        stakeLps();\\n    }\\n\\n  \\n    /**\\n     * @dev Initializes the contract with required parameters\\n     * @param _entropyAddress Address of the Entropy contract for randomness\\n     * @param _initialOwnerAddress Initial owner address (should be different from deployer)\\n     * @param _token Address of the ERC20 token to use for tickets and rewards\\n     * @param _ticketPrice Price of a single ticket (will be multiplied by token decimals)\\n     */\\n    function initialize(\\n        address _entropyAddress, // Address of Entropy contract\\n        address _initialOwnerAddress, // Should be different from msg.sender (deployer)\\n        address _token, // Address of ERC20 token\\n        uint256 _ticketPrice // Price of a single ticket in token\\n    ) public initializer {\\n        __Ownable_init(_initialOwnerAddress);\\n        __UUPSUpgradeable_init();\\n\\n        // Configure entropy\\n        entropy = IEntropy(_entropyAddress);\\n        entropyProvider = entropy.getDefaultProvider();\\n\\n        // Configure token\\n        token = IERC20(_token);\\n        tokenDecimals = IERC20Metadata(_token).decimals();\\n\\n        // Configure jackpot\\n        ticketPrice = _ticketPrice * (10 ** tokenDecimals);\\n        feeBps = 1500; // 15%\\n        referralFeeBps = 500; // 5%\\n        roundDurationInSeconds = 86400; // 1 day\\n        fallbackWinner = _initialOwnerAddress;\\n        lpLimit = 100; // 100 LPs\\n        userLimit = 1500; // 1500 users\\n        allowPurchasing = false;\\n        lastJackpotEndTime = block.timestamp;\\n\\n        // Configure LP pool\\n        minLpDeposit = ticketPrice * 100;\\n        lpPoolCap = minLpDeposit * 1000;\\n        protocolFeeThreshold = minLpDeposit * 10;\\n    }\\n\\n    /********************\\n     *                  *\\n     *      ENTROPY     *\\n     *                  *\\n     ********************/\\n\\n    // It returns the address of the entropy contract which will call the callback.\\n    function getEntropy() internal view override returns (address) {\\n        return address(entropy);\\n    }\\n\\n    // It is called by the entropy contract when a random number is generated.\\n    function entropyCallback(\\n        uint64 sequenceNumber,\\n        address,\\n        bytes32 randomNumber\\n    ) internal override {\\n        emit EntropyResult(sequenceNumber, randomNumber);\\n        require(!entropyCallbackLock, \\\"Entropy callback lock already set\\\");\\n        require(jackpotLock, \\\"Jackpot lock needs to be set\\\");\\n\\n        entropyCallbackLock = true;\\n        determineWinnerAndAdjustStakes(randomNumber);\\n\\n        // release both locks\\n        jackpotLock = false;\\n        entropyCallbackLock = false;\\n    }\\n}\",\"keccak256\":\"0x05f570c2120b193756901b1e6ea5f10ce1b825cd280f4862e3835499d1451485\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/EntropyEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EntropyStructs.sol\\\";\\n\\ninterface EntropyEvents {\\n    event Registered(EntropyStructs.ProviderInfo provider);\\n\\n    event Requested(EntropyStructs.Request request);\\n    event RequestedWithCallback(\\n        address indexed provider,\\n        address indexed requestor,\\n        uint64 indexed sequenceNumber,\\n        bytes32 userRandomNumber,\\n        EntropyStructs.Request request\\n    );\\n\\n    event Revealed(\\n        EntropyStructs.Request request,\\n        bytes32 userRevelation,\\n        bytes32 providerRevelation,\\n        bytes32 blockHash,\\n        bytes32 randomNumber\\n    );\\n    event RevealedWithCallback(\\n        EntropyStructs.Request request,\\n        bytes32 userRandomNumber,\\n        bytes32 providerRevelation,\\n        bytes32 randomNumber\\n    );\\n\\n    event ProviderFeeUpdated(address provider, uint128 oldFee, uint128 newFee);\\n\\n    event ProviderUriUpdated(address provider, bytes oldUri, bytes newUri);\\n\\n    event ProviderFeeManagerUpdated(\\n        address provider,\\n        address oldFeeManager,\\n        address newFeeManager\\n    );\\n\\n    event Withdrawal(\\n        address provider,\\n        address recipient,\\n        uint128 withdrawnAmount\\n    );\\n}\",\"keccak256\":\"0x5e283bdd61877d1761dd139d1edf53e7ab9690c8a10c65bd27fe8edd10025c81\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/EntropyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\ncontract EntropyStructs {\\n    struct ProviderInfo {\\n        uint128 feeInWei;\\n        uint128 accruedFeesInWei;\\n        // The commitment that the provider posted to the blockchain, and the sequence number\\n        // where they committed to this. This value is not advanced after the provider commits,\\n        // and instead is stored to help providers track where they are in the hash chain.\\n        bytes32 originalCommitment;\\n        uint64 originalCommitmentSequenceNumber;\\n        // Metadata for the current commitment. Providers may optionally use this field to help\\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\\n        bytes commitmentMetadata;\\n        // Optional URI where clients can retrieve revelations for the provider.\\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\\n        // TODO: specify the API that must be implemented at this URI\\n        bytes uri;\\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\\n        uint64 endSequenceNumber;\\n        // The sequence number that will be assigned to the next inbound user request.\\n        uint64 sequenceNumber;\\n        // The current commitment represents an index/value in the provider's hash chain.\\n        // These values are used to verify requests for future sequence numbers. Note that\\n        // currentCommitmentSequenceNumber < sequenceNumber.\\n        //\\n        // The currentCommitment advances forward through the provider's hash chain as values\\n        // are revealed on-chain.\\n        bytes32 currentCommitment;\\n        uint64 currentCommitmentSequenceNumber;\\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\\n        address feeManager;\\n    }\\n\\n    struct Request {\\n        // Storage slot 1 //\\n        address provider;\\n        uint64 sequenceNumber;\\n        // The number of hashes required to verify the provider revelation.\\n        uint32 numHashes;\\n        // Storage slot 2 //\\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\\n        // eliminating 1 store.\\n        bytes32 commitment;\\n        // Storage slot 3 //\\n        // The number of the block where this request was created.\\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\\n        // blocks ever generated.\\n        uint64 blockNumber;\\n        // The address that requested this random number.\\n        address requester;\\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\\n        bool useBlockhash;\\n        // If true, the requester will be called back with the generated random value.\\n        bool isRequestWithCallback;\\n        // There are 2 remaining bytes of free space in this slot.\\n    }\\n}\",\"keccak256\":\"0x55f8cdb3050e93fe6ed6c39429963f46ea9107664f8dd8a63a0c26234de6210f\",\"license\":\"Apache 2\"},\"contracts/interfaces/IEntropy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EntropyEvents.sol\\\";\\n\\ninterface IEntropy is EntropyEvents {\\n    // Register msg.sender as a randomness provider. The arguments are the provider's configuration parameters\\n    // and initial commitment. Re-registering the same provider rotates the provider's commitment (and updates\\n    // the feeInWei).\\n    //\\n    // chainLength is the number of values in the hash chain *including* the commitment, that is, chainLength >= 1.\\n    function register(\\n        uint128 feeInWei,\\n        bytes32 commitment,\\n        bytes calldata commitmentMetadata,\\n        uint64 chainLength,\\n        bytes calldata uri\\n    ) external;\\n\\n    // Withdraw a portion of the accumulated fees for the provider msg.sender.\\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\\n    // balance of fees in the contract).\\n    function withdraw(uint128 amount) external;\\n\\n    // Withdraw a portion of the accumulated fees for provider. The msg.sender must be the fee manager for this provider.\\n    // Calling this function will transfer `amount` wei to the caller (provided that they have accrued a sufficient\\n    // balance of fees in the contract).\\n    function withdrawAsFeeManager(address provider, uint128 amount) external;\\n\\n    // As a user, request a random number from `provider`. Prior to calling this method, the user should\\n    // generate a random number x and keep it secret. The user should then compute hash(x) and pass that\\n    // as the userCommitment argument. (You may call the constructUserCommitment method to compute the hash.)\\n    //\\n    // This method returns a sequence number. The user should pass this sequence number to\\n    // their chosen provider (the exact method for doing so will depend on the provider) to retrieve the provider's\\n    // number. The user should then call fulfillRequest to construct the final random number.\\n    //\\n    // This method will revert unless the caller provides a sufficient fee (at least getFee(provider)) as msg.value.\\n    // Note that excess value is *not* refunded to the caller.\\n    function request(\\n        address provider,\\n        bytes32 userCommitment,\\n        bool useBlockHash\\n    ) external payable returns (uint64 assignedSequenceNumber);\\n\\n    // Request a random number. The method expects the provider address and a secret random number\\n    // in the arguments. It returns a sequence number.\\n    //\\n    // The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\\n    // The `entropyCallback` method on that interface will receive a callback with the generated random number.\\n    //\\n    // This method will revert unless the caller provides a sufficient fee (at least getFee(provider)) as msg.value.\\n    // Note that excess value is *not* refunded to the caller.\\n    function requestWithCallback(\\n        address provider,\\n        bytes32 userRandomNumber\\n    ) external payable returns (uint64 assignedSequenceNumber);\\n\\n    // Fulfill a request for a random number. This method validates the provided userRandomness and provider's proof\\n    // against the corresponding commitments in the in-flight request. If both values are validated, this function returns\\n    // the corresponding random number.\\n    //\\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\\n    // If you need to use the returned random number more than once, you are responsible for storing it.\\n    function reveal(\\n        address provider,\\n        uint64 sequenceNumber,\\n        bytes32 userRevelation,\\n        bytes32 providerRevelation\\n    ) external returns (bytes32 randomNumber);\\n\\n    // Fulfill a request for a random number. This method validates the provided userRandomness\\n    // and provider's revelation against the corresponding commitment in the in-flight request. If both values are validated\\n    // and the requestor address is a contract address, this function calls the requester's entropyCallback method with the\\n    // sequence number, provider address and the random number as arguments. Else if the requestor is an EOA, it won't call it.\\n    //\\n    // Note that this function can only be called once per in-flight request. Calling this function deletes the stored\\n    // request information (so that the contract doesn't use a linear amount of storage in the number of requests).\\n    // If you need to use the returned random number more than once, you are responsible for storing it.\\n    //\\n    // Anyone can call this method to fulfill a request, but the callback will only be made to the original requester.\\n    function revealWithCallback(\\n        address provider,\\n        uint64 sequenceNumber,\\n        bytes32 userRandomNumber,\\n        bytes32 providerRevelation\\n    ) external;\\n\\n    function getProviderInfo(\\n        address provider\\n    ) external view returns (EntropyStructs.ProviderInfo memory info);\\n\\n    function getDefaultProvider() external view returns (address provider);\\n\\n    function getRequest(\\n        address provider,\\n        uint64 sequenceNumber\\n    ) external view returns (EntropyStructs.Request memory req);\\n\\n    function getFee(address provider) external view returns (uint128 feeAmount);\\n\\n    function getAccruedPythFees()\\n        external\\n        view\\n        returns (uint128 accruedPythFeesInWei);\\n\\n    function setProviderFee(uint128 newFeeInWei) external;\\n\\n    function setProviderFeeAsFeeManager(\\n        address provider,\\n        uint128 newFeeInWei\\n    ) external;\\n\\n    function setProviderUri(bytes calldata newUri) external;\\n\\n    // Set manager as the fee manager for the provider msg.sender.\\n    // After calling this function, manager will be able to set the provider's fees and withdraw them.\\n    // Only one address can be the fee manager for a provider at a time -- calling this function again with a new value\\n    // will override the previous value. Call this function with the all-zero address to disable the fee manager role.\\n    function setFeeManager(address manager) external;\\n\\n    function constructUserCommitment(\\n        bytes32 userRandomness\\n    ) external pure returns (bytes32 userCommitment);\\n\\n    function combineRandomValues(\\n        bytes32 userRandomness,\\n        bytes32 providerRandomness,\\n        bytes32 blockHash\\n    ) external pure returns (bytes32 combinedRandomness);\\n}\",\"keccak256\":\"0xcdd03055689704cb123471d4bf86d6fa811cd168489f113d9c96f2ad32b2ebe9\",\"license\":\"Apache 2\"},\"contracts/interfaces/IEntropyConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache 2\\npragma solidity ^0.8.0;\\n\\nabstract contract IEntropyConsumer {\\n    // This method is called by Entropy to provide the random number to the consumer.\\n    // It asserts that the msg.sender is the Entropy contract. It is not meant to be\\n    // override by the consumer.\\n    function _entropyCallback(\\n        uint64 sequence,\\n        address provider,\\n        bytes32 randomNumber\\n    ) external {\\n        address entropy = getEntropy();\\n        require(entropy != address(0), \\\"Entropy address not set\\\");\\n        require(msg.sender == entropy, \\\"Only Entropy can call this function\\\");\\n\\n        entropyCallback(sequence, provider, randomNumber);\\n    }\\n\\n    // getEntropy returns Entropy contract address. The method is being used to check that the\\n    // callback is indeed from Entropy contract. The consumer is expected to implement this method.\\n    // Entropy address can be found here - https://docs.pyth.network/entropy/contract-addresses\\n    function getEntropy() internal view virtual returns (address);\\n\\n    // This method is expected to be implemented by the consumer to handle the random number.\\n    // It will be called by _entropyCallback after _entropyCallback ensures that the call is\\n    // indeed from Entropy contract.\\n    function entropyCallback(\\n        uint64 sequence,\\n        address provider,\\n        bytes32 randomNumber\\n    ) internal virtual;\\n}\",\"keccak256\":\"0xc0d9db8cebbf0358b9c4a7d40a2099fab142aa7276c114ccaf299823924b1419\",\"license\":\"Apache 2\"}},\"version\":1}",
  "bytecode": "0x60a08060405234620000d157306080527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16620000c257506001600160401b036002600160401b0319828216016200007c575b6040516133f59081620000d7823960805181818161177a0152611f240152f35b6001600160401b031990911681179091556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880806200005c565b63f92ee8a960e01b8152600490fd5b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630e81b6cf146126485780631209b1f61461262a5780631598165014612609578063173608e71461254557806318254372146125275780631e7b0c01146125065780631ec41163146124dd57806324a9d853146124bf57806328ed54df146124a15780632c8bbb161461223f5780632cdcb677146122215780633169141f146121fe5780633adc6272146121dd5780633b97e856146121bf57806341ea97991461219657806344a1bcb91461217857806346ed010214612152578063470328b5146120f15780634a7c01ec146120d35780634f1ef28614611ea857806351ab9251146119d057806352a5f1f8146117e457806352d1902d146117675780635b470e6e146117465780635d0eaaaf146116f05780635edd2c64146116d257806360b80331146116b1578063630f0b1c146116775780636b7b9112146116345780636f47edb5146115fb578063715018a61461157a57806371ccd3fc1461116357806372c27b62146110825780637480494f146110645780637618f02e1461102157806379ba509714610fce57806385eb72b814610f3c5780638795cccb14610e37578063879b92d614610e195780638c6a337614610d855780638d2459b014610d5f5780638da5cb5b14610d295780638e98a1d314610d0b57806392646c2014610cc9578063a2790cd514610cab578063a6c21c3714610c92578063ad3cb1cc14610be7578063c147b47114610bc9578063c988bdc314610ba8578063c9cec0ab14610b2a578063cc42e83a14610a70578063cce516b714610a47578063cf756fdf14610705578063d31ed2c4146106e7578063d4bdb266146106c9578063e30c397814610693578063e5ca0fd714610675578063f2ac00e514610657578063f2fde38b146105d0578063fc0c546a146105a3578063fcbf86721461057b5763fed5fbc9146102c657600080fd5b34610576576020806003193601126105765767ffffffffffffffff806004351161057657366023600435011215610576576004356004013511610576576024903660246004356004013560051b60043501011161057657610325612ad3565b60005b60043560040135811061033757005b600435600582901b018301356001600160a01b03811690036105765760018060a01b03838260051b6004350101351660005260039081835260406000209161038460ff82850154166128a1565b600283015461053257600192838101546104fd576005546000199460005b8281106104aa575b50506103ba6000198614156128e0565b80600019810111610495576001946103ee6103db61040c93600019016126e9565b888060a01b03915490871b1c16916126e9565b90919060018060a01b038084549260031b9316831b921b1916179055565b610414612921565b8054918101805460ff191690558161046a575b506040519081527febd480b822209fc7890cbdf5b21417b4aa0db6d18f10f47afc87c12d227b90e084848060a01b03878560051b6004350101351692a201610328565b6000905561048f81868460051b600435010135858060a01b03601a5460081c16612af4565b38610427565b86634e487b7160e01b60005260116004526000fd5b6104ba81989698979495976126e9565b905490881b1c6001600160a01b0390811660043560058b901b018b0135909116146104ed578101969496959392956103a2565b94969495939250389050806103aa565b60405162461bcd60e51b815260048101869052600e818801526d04c50207374616b65206e6f7420360941b6044820152606490fd5b60405162461bcd60e51b8152600481018590526018818701527f4c50207269736b2070657263656e74616765206e6f74203000000000000000006044820152606490fd5b600080fd5b3461057657600036600319011261057657610594612ad3565b600d805460ff60a01b19169055005b3461057657600036600319011261057657601a5460405160089190911c6001600160a01b03168152602090f35b34610576576020366003190112610576576105e9612669565b6105f1612ad3565b6000805160206133a083398151915280546001600160a01b0319166001600160a01b03928316908117909155600080516020613380833981519152549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b34610576576000366003190112610576576020601754604051908152f35b34610576576000366003190112610576576020600a54604051908152f35b34610576576000366003190112610576576000805160206133a0833981519152546040516001600160a01b039091168152602090f35b34610576576000366003190112610576576020601154604051908152f35b34610576576000366003190112610576576020600854604051908152f35b346105765760803660031901126105765761071e612669565b610726612695565b61072e61267f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549160ff8360401c16159267ffffffffffffffff811680159081610a3f575b6001149081610a35575b159081610a2c575b50610a1a5767ffffffffffffffff1981166001178655836109fb575b506107a7612f77565b6107af612f77565b6001600160a01b03938085169283156109e2576107cc8692612b9f565b6107d4612f77565b16936001600160601b0360a01b8581600054161760005560405180966320bba64360e21b82528160046020998a935afa801561099c5783916000916109a8575b5016816001541617600155601a549186610100600160a81b038560081b169485610100600160a81b0319861617601a5560046040518094819363313ce56760e01b8352165afa90811561099c57600091610963575b5061087d60ff610885921680601b55612ac5565b60643561288e565b93846006556105dc9182600e556101f460115562015180600755601654161760165560646017556019556affffffffffffffffffffff60a81b1617601a554260085560648102908082046064148115171561094d5781601855620186a08102906103e890831592848104831484171561094d57600a5502918204600a14171561094d57601c5561091157005b7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29168ff000000000000000019815416905560405160018152a1005b634e487b7160e01b600052601160045260246000fd5b90508681813d8311610995575b61097a81836126ab565b81010312610576575160ff811681036105765761087d610869565b503d610970565b6040513d6000823e3d90fd5b809250888092503d83116109db575b6109c181836126ab565b810103126105765751828116810361057657829089610814565b503d6109b7565b604051631e4fbdf760e01b815260006004820152602490fd5b68ffffffffffffffffff1916680100000000000000011785558561079e565b60405163f92ee8a960e01b8152600490fd5b90501587610782565b303b15915061077a565b859150610770565b34610576576000366003190112610576576014546040516001600160a01b039091168152602090f35b3461057657600036600319011261057657336000526002602052600160406000200180548015610ae5576000610ae3926040518381527fe372573e877677790970468683abedca6e4f2b10029faf042f8956e47c5df64960203392a255601a54339060081c6001600160a01b0316612af4565b005b60405162461bcd60e51b815260206004820152601760248201527f4e6f2077696e6e696e677320746f2077697468647261770000000000000000006044820152606490fd5b3461057657602036600319011261057657600435610b46612ad3565b600e548111610b5457601155005b60405162461bcd60e51b815260206004820152602660248201527f526566657272616c206270732073686f756c64206e6f7420657863656564206660448201526565652062707360d01b6064820152608490fd5b3461057657602036600319011261057657610bc1612ad3565b600435601855005b34610576576000366003190112610576576020600954604051908152f35b34610576576000366003190112610576576040516040810181811067ffffffffffffffff821117610c7c5760405260058152602090640352e302e360dc1b60208201526040518092602082528251908160208401526000935b828510610c63575050604092506000838284010152601f80199101168101030190f35b8481018201518686016040015293810193859350610c40565b634e487b7160e01b600052604160045260246000fd5b3461057657600036600319011261057657610ae3612965565b34610576576000366003190112610576576020601854604051908152f35b346105765760203660031901126105765760043560055481101561057657610cf26020916126e9565b905460405160039290921b1c6001600160a01b03168152f35b34610576576000366003190112610576576020600754604051908152f35b3461057657600036600319011261057657600080516020613380833981519152546040516001600160a01b039091168152602090f35b3461057657600036600319011261057657602060ff600d5460a81c166040519015158152f35b346105765760203660031901126105765760043580151580610e0e575b610dab90612822565b610dbd60ff600d5460a01c161561277a565b3360005260036020528060026040600020610dde60ff6003830154166128a1565b01556040519081527f5865997b702fe8b5b63c8a8aa1ffcd7b235564e48f1b0b27b9e2f4841356cc6260203392a2005b506064811115610da2565b34610576576000366003190112610576576020600b54604051908152f35b3461057657600036600319011261057657610e50612ad3565b6015548015610ef75760006015556014546001600160a01b03919082168015610eb257610e8392601a5460081c16612af4565b7f23f70d1b0e61e7e7db842184b58ff9ae4cc5b6ddd32bdefc9f936d5ea5a0bf146020601554604051908152a1005b60405162461bcd60e51b815260206004820152601c60248201527f50726f746f636f6c206665652061646472657373206e6f7420736574000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4e6f2070726f746f636f6c206665657320746f207769746864726177000000006044820152606490fd5b3461057657600036600319011261057657600054600154604051631711922960e31b81526001600160a01b0391821660048201529160209183916024918391165afa801561099c57602091600091610fa1575b506001600160801b0360405191168152f35b610fc19150823d8411610fc7575b610fb981836126ab565b8101906127c6565b82610f8f565b503d610faf565b34610576576000366003190112610576576000805160206133a083398151915254336001600160a01b039091160361100957610ae333612b9f565b60405163118cdaa760e01b8152336004820152602490fd5b346105765760203660031901126105765761103a612669565b611042612ad3565b601680546001600160a01b0319166001600160a01b0392909216919091179055005b34610576576000366003190112610576576020601254604051908152f35b346105765760203660031901126105765760043561109e612ad3565b611f40811161111e576011546101f4810180911161094d5781106110c157600e55005b60405162461bcd60e51b815260206004820152602f60248201527f526566657272616c206270732073686f756c64206265206c657373207468616e60448201526e020666565206270732062792035303608c1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601e60248201527f466565206270732073686f756c64206e6f7420657863656564203830303000006044820152606490fd5b3461057657604036600319011261057657602460043581358115158061156f575b61118d90612822565b61119f60ff600d5460a01c161561277a565b801561151a5760018060a01b0380601a5460081c16604051906370a0823160e01b9182815230600482015260209485828981865afa91821561099c576000926114e9575b506111f2919230903390612b46565b8383601a5460081c1692876040518095819382523060048301525afa801561099c576000906114ba575b61122692506127e5565b936006549461123e86611239818461286e565b61288e565b95336000526003855260ff6003604060002001541615611425575b86106113bb5761126b8660095461276d565b600a541061137757859033600052600385528560406000209360038501805460ff811615611303575b5050506002846112a8856112b1975461276d565b815501556127e5565b806112ea575b50506040519283528201527fee1c1fc8c3cee482d2fd6bc7dac7f2282a10417bcd4a828918e2c563525cc3f060403392a2005b6112fc913390601a5460081c16612af4565b83806112b7565b60ff19166001179055600554929493509050600160401b821015611363575091856002889361135c61133e8760016112b199016005556126e9565b81546001600160a01b0360039290921b91821b19163390911b179055565b948a611294565b634e487b7160e01b60009081526041600452fd5b60405162461bcd60e51b815260048101859052601b818401527f4465706f7369742065786365656473204c5020706f6f6c2063617000000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526039818401527f496e76616c6964206465706f73697420616d6f756e742c206d7573742062652060448201527f67726561746572207468616e207469636b6574207072696365000000000000006064820152608490fd5b600554601754111561147f576018548710156112595760405162461bcd60e51b815260048101869052601c818501527f4c50206465706f736974206c657373207468616e206d696e696d756d000000006044820152606490fd5b60405162461bcd60e51b8152600481018690526014818501527313585e081314081b1a5b5a5d081c995858da195960621b6044820152606490fd5b508382813d83116114e2575b6114d081836126ab565b8101031261057657611226915161121c565b503d6114c6565b91508582813d8311611513575b61150081836126ab565b81010312610576576111f29151916111e3565b503d6114f6565b60405162461bcd60e51b8152602060048201526028818501527f496e76616c6964206465706f73697420616d6f756e742c206d75737420626520604482015267706f73697469766560c01b6064820152608490fd5b506064821115611184565b3461057657600036600319011261057657611593612ad3565b6000805160206133a083398151915280546001600160a01b0319908116909155600080516020613380833981519152805491821690556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346105765760203660031901126105765760043580151580910361057657611621612ad3565b60ff8019601a5416911617601a55600080f35b346105765760203660031901126105765761164d612669565b611655612ad3565b601480546001600160a01b0319166001600160a01b0392909216919091179055005b34610576576020366003190112610576576001600160a01b03611698612669565b1660005260136020526020604060002054604051908152f35b34610576576020366003190112610576576116ca612ad3565b600435601955005b34610576576000366003190112610576576020600c54604051908152f35b34610576576020366003190112610576576001600160a01b03611711612669565b1660005260026020526060604060002080549060ff600260018301549201541690604051928352602083015215156040820152f35b346105765760203660031901126105765761175f612ad3565b600435601755005b34610576576000366003190112610576577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036117d25760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405163703e46dd60e11b8152600490fd5b346105765760603660031901126105765760043567ffffffffffffffff811680910361057657611812612695565b5060005460443591906001600160a01b0316801561198b57330361193a5760407f651c0245420dae86b3736a649329183412691f8b793c6f53958bcfca62a9f1d4918151908152836020820152a1600d549060ff8260a81c166118eb5760ff8260a01c16156118a65760ff60a81b19909116600160a81b17600d5561189690612c69565b600d805461ffff60a01b19169055005b60405162461bcd60e51b815260206004820152601c60248201527f4a61636b706f74206c6f636b206e6565647320746f20626520736574000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e74726f70792063616c6c6261636b206c6f636b20616c72656164792073656044820152601d60fa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c7920456e74726f70792063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f456e74726f70792061646472657373206e6f74207365740000000000000000006044820152606490fd5b34610576576060366003190112610576576119e9612669565b60249081356119f661267f565b90601a549260ff841615611e64578115611e0e57611a1c60ff600d5460a01c161561277a565b6001600160a01b0390811693338514611dd2576040516370a0823160e01b808252306004830152602094909260081c8416919085828a81865afa91821561099c57600092611da1575b50611a74919230903390612b46565b8383601a5460081c1692886040518095819382523060048301525afa801561099c57600090611d72575b611aa892506127e5565b928181168015908115611d68575b5015611d62575033925b60065490611ace828261286e565b918215611d0657611adf908361288e565b91600e5490612710918203828111611cf157611afa9161288e565b9784871696876000526002875260406000209160028301805460ff811615611c3d575b5050505091611bd2611bca7fd72c70202ab87b3549553b1d4ceb2a632c83cb96fa2dfe65c30282862fe11ade9796959385611b5c8d611bda985461276d565b9055611b6a8c600c5461276d565b600c55611bc181611b7d600e548861288e565b04918c158015918e91611c3557611b966011548a61288e565b045b611ba281866127e5565b92611baf86600f5461276d565b600f55611c06575b505060105461276d565b601055846127e5565b600b5461276d565b600b556127e5565b80611bed575b50506040519485523394a4005b611bff913390601a5460081c16612af4565b8580611be0565b611c2b9160005260138c526040600020611c2182825461276d565b905560125461276d565b6012558c8f611bb7565b506000611b98565b6004546019541115611cb45760ff1916600117905560045490600160401b82101561136357507fd72c70202ab87b3549553b1d4ceb2a632c83cb96fa2dfe65c30282862fe11ade97969593611bda9593611ca7611bd2946103ee856001611bca9701600455612736565b9395819597989950611b1d565b60405162461bcd60e51b8152600481018b90526016818501527513585e081d5cd95c881b1a5b5a5d081c995858da195960521b6044820152606490fd5b89634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101869052602f818a01527f496e73756666696369656e7420616d6f756e7420666f72206d696e696d756d2060448201526e7469636b657420707572636861736560881b6064820152608490fd5b92611ac0565b9050331487611ab6565b508382813d8311611d9a575b611d8881836126ab565b8101031261057657611aa89151611a9e565b503d611d7e565b91508582813d8311611dcb575b611db881836126ab565b8101031261057657611a74915191611a65565b503d611dae565b60405162461bcd60e51b8152602060048201526015818801527421b0b73737ba103932b332b9103cb7bab939b2b63360591b6044820152606490fd5b60405162461bcd60e51b8152602060048201526029818701527f496e76616c696420707572636861736520616d6f756e742c206d75737420626560448201526820706f73697469766560b81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601e818701527f50757263686173696e67207469636b657473206e6f7420616c6c6f77656400006044820152606490fd5b604036600319011261057657611ebc612669565b602490813567ffffffffffffffff8111610576573660238201121561057657806004013591611eea836126cd565b611ef760405191826126ab565b83815260209384820193368783830101116105765781600092888893018737830101526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081163081149081156120a5575b506117d257611f5d612ad3565b6040516352d1902d60e01b8152908316948082600481895afa918291600093612075575b5050611f9f57604051634c9c8ce360e01b8152600481018690528690fd5b8490867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918281036120605750843b1561204a575080546001600160a01b03191682179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511561203057506000610ae39381925190845af461202a6127f2565b9161331c565b925050503461203b57005b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101849052fd5b60405190632a87526960e21b82526004820152fd5b9080929350813d831161209e575b61208d81836126ab565b810103126105765751908780611f81565b503d612083565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141587611f50565b34610576576000366003190112610576576020601954604051908152f35b34610576576020366003190112610576576001600160a01b03612112612669565b1660005260036020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b3461057657600036600319011261057657602060ff600d5460a01c166040519015158152f35b34610576576000366003190112610576576020601554604051908152f35b34610576576000366003190112610576576016546040516001600160a01b039091168152602090f35b34610576576000366003190112610576576020601b54604051908152f35b34610576576020366003190112610576576121f6612ad3565b600435601c55005b3461057657600036600319011261057657602060ff601a54166040519015158152f35b34610576576000366003190112610576576020601c54604051908152f35b6020806003193601126105765761225b6008546007549061276d565b421061245257600d5461227460ff8260a01c161561277a565b60ff60a01b1916600160a01b17600d55600054600154604051631711922960e31b81526001600160a01b03918216600482015290929182908290602490829087165afa801561099c576001600160801b0391600091612435575b5016918234106123dd57819083341161237d575b60448160005416916001541660405195869384926319cb825f60e01b8452600484015260043560248401525af1801561099c57612342575b337f826f6f38165cfdebf966078f0436bc3e414e3972837815771126691a3faa7daa600080a2005b81813d8311612376575b61235681836126ab565b81010312610576575167ffffffffffffffff81160361057657808061231a565b503d61234c565b9050600080808061238e87346127e5565b335af16123996127f2565b50156123a65781906122e2565b60405162461bcd60e51b815260048101839052600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f496e73756666696369656e742067617320746f2067656e65726174652072616e6044820152693237b690373ab6b132b960b11b6064820152608490fd5b61244c9150833d8511610fc757610fb981836126ab565b846122ce565b6084906040519062461bcd60e51b82526004820152602260248201527f4a61636b706f742063616e206f6e6c792062652072756e206f6e636520612064604482015261617960f01b6064820152fd5b34610576576000366003190112610576576020600f54604051908152f35b34610576576000366003190112610576576020600e54604051908152f35b3461057657600036600319011261057657600d546040516001600160a01b039091168152602090f35b346105765760203660031901126105765761251f612ad3565b600435600755005b34610576576000366003190112610576576020601054604051908152f35b3461057657600036600319011261057657336000526013602052604060002054156125c4573360005260136020526040600020600081549155612596813360018060a01b03601a5460081c16612af4565b6040519081527fd637c0db1643ba2f0205c1f2dd21d9f30bda04ed307d74527e6592f1f43f435d60203392a2005b60405162461bcd60e51b815260206004820152601c60248201527f4e6f20726566657272616c206665657320746f207769746864726177000000006044820152606490fd5b3461057657602036600319011261057657612622612ad3565b600435600655005b34610576576000366003190112610576576020600654604051908152f35b3461057657602036600319011261057657612661612ad3565b600435600a55005b600435906001600160a01b038216820361057657565b604435906001600160a01b038216820361057657565b602435906001600160a01b038216820361057657565b90601f8019910116810190811067ffffffffffffffff821117610c7c57604052565b67ffffffffffffffff8111610c7c57601f01601f191660200190565b6005548110156127205760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156127205760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b9190820180921161094d57565b1561278157565b60405162461bcd60e51b815260206004820152601d60248201527f4a61636b706f742069732063757272656e746c792072756e6e696e67210000006044820152606490fd5b9081602091031261057657516001600160801b03811681036105765790565b9190820391821161094d57565b3d1561281d573d90612803826126cd565b9161281160405193846126ab565b82523d6000602084013e565b606090565b1561282957565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207269736b2070657263656e746167650000000000000000006044820152606490fd5b8115612878570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561094d57565b156128a857565b60405162461bcd60e51b815260206004820152601060248201526f4c50206973206e6f742061637469766560801b6044820152606490fd5b156128e757565b60405162461bcd60e51b81526020600482015260126024820152711314081a5b99195e081b9bdd08199bdd5b9960721b6044820152606490fd5b600554801561294f5760001901612937816126e9565b81549060018060a01b039060031b1b19169055600555565b634e487b7160e01b600052603160045260246000fd5b600033815260039060036020526040812091600383019182549261298b60ff85166128a1565b6001936001860154612a9257828654968160028201555560ff19169055600019928192600554935b848110612a5f575b5050506129cc6000198414156128e0565b6000198201918211612a4b57506103ee612a07612a1d936129ed86946126e9565b90546001600160a01b039460039290921b1c8416916126e9565b612a0f612921565b3390601a5460081c16612af4565b6040519081527febd480b822209fc7890cbdf5b21417b4aa0db6d18f10f47afc87c12d227b90e060203392a2565b634e487b7160e01b81526011600452602490fd5b612a68816126e9565b905490831b1c6001600160a01b03163314612a845782016129b3565b9294505050913880806129bb565b5050928392506002915001557fd71ab63e9df325a911adc1b0732eb4baca8d0218e79bcd112acec661f33fa962339180a2565b604d811161094d57600a0a90565b600080516020613380833981519152546001600160a01b0316330361100957565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610c7c57612b4492604052612c0d565b565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117610c7c57612b4492604052612c0d565b6000805160206133a083398151915280546001600160a01b031990811690915560008051602061338083398151915280549182166001600160a01b0393841690811790915591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b906000602091828151910182855af11561099c576000513d612c6057506001600160a01b0381163b155b612c3e5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612c37565b42600855600c5415612f1957612c7d6130da565b600b54600954908111612e0e5750612cb97f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8291600c549061320b565b6001600160a01b03612d4d81612cce846132aa565b1692836001600160601b0360a01b600d541617600d55600b5493600052600260205260406000209360018501612d0582825461276d565b9055612d0f612fb8565b60085493600d5416945491604051958695869192608093969594919660a0840197845260018060a01b03166020840152604083015260608201520152565b0390a15b60005b600454811015612d995780612d6a600192612736565b838060a01b0391549060031b1c166000526002806020526040600020600081550160ff19815416905501612d54565b50600454600060045580612dca575b506000600b5560006009556000600c556000600f556000601255612b44613020565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101905b818110612e025750612da8565b60008155600101612df5565b6127109081810291818304149015171561094d577f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8291612e54612e5a926006549061286e565b9061320b565b600c548111612ec1576001600160a01b03612eb981612e78846132aa565b1692836001600160601b0360a01b600d541617600d5560095493600052600260205260406000209360018501612eaf82825461276d565b9055612d0f613220565b0390a1612d51565b600d80546001600160a01b031916905560a090612edc613220565b612ee4612fb8565b60085490600180841b03600d5416906009549160405193845260208401526040830152606082015260006080820152a1612d51565b507f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8260a0600954604051904282526000602083015260006040830152606082015260006080820152a1612f6a612fb8565b6000600955612b44613020565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615612fa657565b604051631afcd79f60e31b8152600490fd5b6000805b60055481101561301c578082612fd36001936126e9565b905490600391858060a01b0391831b1c1682528060205260ff604083209182015416613002575b505001612fbc565b838101906130128254825461276d565b9055558238612ffa565b5050565b6000805b60055481101561301c578061303a6001926126e9565b905490600391848060a01b0391831b1c169081855260209080825260409060ff8288209182015416613071575b5050505001613024565b7f14d1e9852fb8075cc7cf65ab53df7e7110c775fdc60cc33026d2871bd8bd8a91928154906130c560646130a960028601548561288e565b048093818b87015560096130be83825461276d565b90556127e5565b8093558351928352820152a238808080613067565b60098054156131f2576014546001600160a01b03919082161515806131e4575b6131bd575b60009160005b6005548110156131a95781613119826126e9565b919054600392831b1c166000528060205260ff60406000209182015416613144575b50600101613105565b6131a2906001929561318f60105461318961318361317b613171601b549461316b86612ac5565b9061288e565b898801549061288e565b8a549061286e565b91612ac5565b9061286e565b9161319b83825461276d565b905561276d565b939061313b565b5050506131b8906010546127e5565b601055565b6131dc6010546131d1600a820480926127e5565b60105560155461276d565b6015556130ff565b50601054601c5411156130fa565b50613201601054600b5461276d565b600b556000601055565b811561287857066001810180911161094d5790565b60098054156132a7576000805b6005548110156132a257806132436001926126e9565b905490600391848060a01b0391831b1c1684528060205260ff604085209182015416613271575b500161322d565b61329a613293600b5461318961318361317b613171601b549461316b86612ac5565b825461276d565b90553861326a565b505050565b50565b60008091600454925b8381106132ce5750506016546001600160a01b031692915050565b6133026132da82612736565b905460039190911b1c6001600160a01b0316600081815260026020526040902054909461276d565b928383111561331457506001016132b3565b935050505090565b90613343575080511561333157805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580613376575b613354575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561334c56fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00a2646970667358221220c80869c4bbbfb9813d968e2de4afd702d5aaa161f33d8bebcb1d518212cd88ca64736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630e81b6cf146126485780631209b1f61461262a5780631598165014612609578063173608e71461254557806318254372146125275780631e7b0c01146125065780631ec41163146124dd57806324a9d853146124bf57806328ed54df146124a15780632c8bbb161461223f5780632cdcb677146122215780633169141f146121fe5780633adc6272146121dd5780633b97e856146121bf57806341ea97991461219657806344a1bcb91461217857806346ed010214612152578063470328b5146120f15780634a7c01ec146120d35780634f1ef28614611ea857806351ab9251146119d057806352a5f1f8146117e457806352d1902d146117675780635b470e6e146117465780635d0eaaaf146116f05780635edd2c64146116d257806360b80331146116b1578063630f0b1c146116775780636b7b9112146116345780636f47edb5146115fb578063715018a61461157a57806371ccd3fc1461116357806372c27b62146110825780637480494f146110645780637618f02e1461102157806379ba509714610fce57806385eb72b814610f3c5780638795cccb14610e37578063879b92d614610e195780638c6a337614610d855780638d2459b014610d5f5780638da5cb5b14610d295780638e98a1d314610d0b57806392646c2014610cc9578063a2790cd514610cab578063a6c21c3714610c92578063ad3cb1cc14610be7578063c147b47114610bc9578063c988bdc314610ba8578063c9cec0ab14610b2a578063cc42e83a14610a70578063cce516b714610a47578063cf756fdf14610705578063d31ed2c4146106e7578063d4bdb266146106c9578063e30c397814610693578063e5ca0fd714610675578063f2ac00e514610657578063f2fde38b146105d0578063fc0c546a146105a3578063fcbf86721461057b5763fed5fbc9146102c657600080fd5b34610576576020806003193601126105765767ffffffffffffffff806004351161057657366023600435011215610576576004356004013511610576576024903660246004356004013560051b60043501011161057657610325612ad3565b60005b60043560040135811061033757005b600435600582901b018301356001600160a01b03811690036105765760018060a01b03838260051b6004350101351660005260039081835260406000209161038460ff82850154166128a1565b600283015461053257600192838101546104fd576005546000199460005b8281106104aa575b50506103ba6000198614156128e0565b80600019810111610495576001946103ee6103db61040c93600019016126e9565b888060a01b03915490871b1c16916126e9565b90919060018060a01b038084549260031b9316831b921b1916179055565b610414612921565b8054918101805460ff191690558161046a575b506040519081527febd480b822209fc7890cbdf5b21417b4aa0db6d18f10f47afc87c12d227b90e084848060a01b03878560051b6004350101351692a201610328565b6000905561048f81868460051b600435010135858060a01b03601a5460081c16612af4565b38610427565b86634e487b7160e01b60005260116004526000fd5b6104ba81989698979495976126e9565b905490881b1c6001600160a01b0390811660043560058b901b018b0135909116146104ed578101969496959392956103a2565b94969495939250389050806103aa565b60405162461bcd60e51b815260048101869052600e818801526d04c50207374616b65206e6f7420360941b6044820152606490fd5b60405162461bcd60e51b8152600481018590526018818701527f4c50207269736b2070657263656e74616765206e6f74203000000000000000006044820152606490fd5b600080fd5b3461057657600036600319011261057657610594612ad3565b600d805460ff60a01b19169055005b3461057657600036600319011261057657601a5460405160089190911c6001600160a01b03168152602090f35b34610576576020366003190112610576576105e9612669565b6105f1612ad3565b6000805160206133a083398151915280546001600160a01b0319166001600160a01b03928316908117909155600080516020613380833981519152549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b34610576576000366003190112610576576020601754604051908152f35b34610576576000366003190112610576576020600a54604051908152f35b34610576576000366003190112610576576000805160206133a0833981519152546040516001600160a01b039091168152602090f35b34610576576000366003190112610576576020601154604051908152f35b34610576576000366003190112610576576020600854604051908152f35b346105765760803660031901126105765761071e612669565b610726612695565b61072e61267f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009283549160ff8360401c16159267ffffffffffffffff811680159081610a3f575b6001149081610a35575b159081610a2c575b50610a1a5767ffffffffffffffff1981166001178655836109fb575b506107a7612f77565b6107af612f77565b6001600160a01b03938085169283156109e2576107cc8692612b9f565b6107d4612f77565b16936001600160601b0360a01b8581600054161760005560405180966320bba64360e21b82528160046020998a935afa801561099c5783916000916109a8575b5016816001541617600155601a549186610100600160a81b038560081b169485610100600160a81b0319861617601a5560046040518094819363313ce56760e01b8352165afa90811561099c57600091610963575b5061087d60ff610885921680601b55612ac5565b60643561288e565b93846006556105dc9182600e556101f460115562015180600755601654161760165560646017556019556affffffffffffffffffffff60a81b1617601a554260085560648102908082046064148115171561094d5781601855620186a08102906103e890831592848104831484171561094d57600a5502918204600a14171561094d57601c5561091157005b7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29168ff000000000000000019815416905560405160018152a1005b634e487b7160e01b600052601160045260246000fd5b90508681813d8311610995575b61097a81836126ab565b81010312610576575160ff811681036105765761087d610869565b503d610970565b6040513d6000823e3d90fd5b809250888092503d83116109db575b6109c181836126ab565b810103126105765751828116810361057657829089610814565b503d6109b7565b604051631e4fbdf760e01b815260006004820152602490fd5b68ffffffffffffffffff1916680100000000000000011785558561079e565b60405163f92ee8a960e01b8152600490fd5b90501587610782565b303b15915061077a565b859150610770565b34610576576000366003190112610576576014546040516001600160a01b039091168152602090f35b3461057657600036600319011261057657336000526002602052600160406000200180548015610ae5576000610ae3926040518381527fe372573e877677790970468683abedca6e4f2b10029faf042f8956e47c5df64960203392a255601a54339060081c6001600160a01b0316612af4565b005b60405162461bcd60e51b815260206004820152601760248201527f4e6f2077696e6e696e677320746f2077697468647261770000000000000000006044820152606490fd5b3461057657602036600319011261057657600435610b46612ad3565b600e548111610b5457601155005b60405162461bcd60e51b815260206004820152602660248201527f526566657272616c206270732073686f756c64206e6f7420657863656564206660448201526565652062707360d01b6064820152608490fd5b3461057657602036600319011261057657610bc1612ad3565b600435601855005b34610576576000366003190112610576576020600954604051908152f35b34610576576000366003190112610576576040516040810181811067ffffffffffffffff821117610c7c5760405260058152602090640352e302e360dc1b60208201526040518092602082528251908160208401526000935b828510610c63575050604092506000838284010152601f80199101168101030190f35b8481018201518686016040015293810193859350610c40565b634e487b7160e01b600052604160045260246000fd5b3461057657600036600319011261057657610ae3612965565b34610576576000366003190112610576576020601854604051908152f35b346105765760203660031901126105765760043560055481101561057657610cf26020916126e9565b905460405160039290921b1c6001600160a01b03168152f35b34610576576000366003190112610576576020600754604051908152f35b3461057657600036600319011261057657600080516020613380833981519152546040516001600160a01b039091168152602090f35b3461057657600036600319011261057657602060ff600d5460a81c166040519015158152f35b346105765760203660031901126105765760043580151580610e0e575b610dab90612822565b610dbd60ff600d5460a01c161561277a565b3360005260036020528060026040600020610dde60ff6003830154166128a1565b01556040519081527f5865997b702fe8b5b63c8a8aa1ffcd7b235564e48f1b0b27b9e2f4841356cc6260203392a2005b506064811115610da2565b34610576576000366003190112610576576020600b54604051908152f35b3461057657600036600319011261057657610e50612ad3565b6015548015610ef75760006015556014546001600160a01b03919082168015610eb257610e8392601a5460081c16612af4565b7f23f70d1b0e61e7e7db842184b58ff9ae4cc5b6ddd32bdefc9f936d5ea5a0bf146020601554604051908152a1005b60405162461bcd60e51b815260206004820152601c60248201527f50726f746f636f6c206665652061646472657373206e6f7420736574000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4e6f2070726f746f636f6c206665657320746f207769746864726177000000006044820152606490fd5b3461057657600036600319011261057657600054600154604051631711922960e31b81526001600160a01b0391821660048201529160209183916024918391165afa801561099c57602091600091610fa1575b506001600160801b0360405191168152f35b610fc19150823d8411610fc7575b610fb981836126ab565b8101906127c6565b82610f8f565b503d610faf565b34610576576000366003190112610576576000805160206133a083398151915254336001600160a01b039091160361100957610ae333612b9f565b60405163118cdaa760e01b8152336004820152602490fd5b346105765760203660031901126105765761103a612669565b611042612ad3565b601680546001600160a01b0319166001600160a01b0392909216919091179055005b34610576576000366003190112610576576020601254604051908152f35b346105765760203660031901126105765760043561109e612ad3565b611f40811161111e576011546101f4810180911161094d5781106110c157600e55005b60405162461bcd60e51b815260206004820152602f60248201527f526566657272616c206270732073686f756c64206265206c657373207468616e60448201526e020666565206270732062792035303608c1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601e60248201527f466565206270732073686f756c64206e6f7420657863656564203830303000006044820152606490fd5b3461057657604036600319011261057657602460043581358115158061156f575b61118d90612822565b61119f60ff600d5460a01c161561277a565b801561151a5760018060a01b0380601a5460081c16604051906370a0823160e01b9182815230600482015260209485828981865afa91821561099c576000926114e9575b506111f2919230903390612b46565b8383601a5460081c1692876040518095819382523060048301525afa801561099c576000906114ba575b61122692506127e5565b936006549461123e86611239818461286e565b61288e565b95336000526003855260ff6003604060002001541615611425575b86106113bb5761126b8660095461276d565b600a541061137757859033600052600385528560406000209360038501805460ff811615611303575b5050506002846112a8856112b1975461276d565b815501556127e5565b806112ea575b50506040519283528201527fee1c1fc8c3cee482d2fd6bc7dac7f2282a10417bcd4a828918e2c563525cc3f060403392a2005b6112fc913390601a5460081c16612af4565b83806112b7565b60ff19166001179055600554929493509050600160401b821015611363575091856002889361135c61133e8760016112b199016005556126e9565b81546001600160a01b0360039290921b91821b19163390911b179055565b948a611294565b634e487b7160e01b60009081526041600452fd5b60405162461bcd60e51b815260048101859052601b818401527f4465706f7369742065786365656473204c5020706f6f6c2063617000000000006044820152606490fd5b60405162461bcd60e51b8152600481018590526039818401527f496e76616c6964206465706f73697420616d6f756e742c206d7573742062652060448201527f67726561746572207468616e207469636b6574207072696365000000000000006064820152608490fd5b600554601754111561147f576018548710156112595760405162461bcd60e51b815260048101869052601c818501527f4c50206465706f736974206c657373207468616e206d696e696d756d000000006044820152606490fd5b60405162461bcd60e51b8152600481018690526014818501527313585e081314081b1a5b5a5d081c995858da195960621b6044820152606490fd5b508382813d83116114e2575b6114d081836126ab565b8101031261057657611226915161121c565b503d6114c6565b91508582813d8311611513575b61150081836126ab565b81010312610576576111f29151916111e3565b503d6114f6565b60405162461bcd60e51b8152602060048201526028818501527f496e76616c6964206465706f73697420616d6f756e742c206d75737420626520604482015267706f73697469766560c01b6064820152608490fd5b506064821115611184565b3461057657600036600319011261057657611593612ad3565b6000805160206133a083398151915280546001600160a01b0319908116909155600080516020613380833981519152805491821690556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346105765760203660031901126105765760043580151580910361057657611621612ad3565b60ff8019601a5416911617601a55600080f35b346105765760203660031901126105765761164d612669565b611655612ad3565b601480546001600160a01b0319166001600160a01b0392909216919091179055005b34610576576020366003190112610576576001600160a01b03611698612669565b1660005260136020526020604060002054604051908152f35b34610576576020366003190112610576576116ca612ad3565b600435601955005b34610576576000366003190112610576576020600c54604051908152f35b34610576576020366003190112610576576001600160a01b03611711612669565b1660005260026020526060604060002080549060ff600260018301549201541690604051928352602083015215156040820152f35b346105765760203660031901126105765761175f612ad3565b600435601755005b34610576576000366003190112610576577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036117d25760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60405163703e46dd60e11b8152600490fd5b346105765760603660031901126105765760043567ffffffffffffffff811680910361057657611812612695565b5060005460443591906001600160a01b0316801561198b57330361193a5760407f651c0245420dae86b3736a649329183412691f8b793c6f53958bcfca62a9f1d4918151908152836020820152a1600d549060ff8260a81c166118eb5760ff8260a01c16156118a65760ff60a81b19909116600160a81b17600d5561189690612c69565b600d805461ffff60a01b19169055005b60405162461bcd60e51b815260206004820152601c60248201527f4a61636b706f74206c6f636b206e6565647320746f20626520736574000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602160248201527f456e74726f70792063616c6c6261636b206c6f636b20616c72656164792073656044820152601d60fa1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f4f6e6c7920456e74726f70792063616e2063616c6c20746869732066756e637460448201526234b7b760e91b6064820152608490fd5b60405162461bcd60e51b815260206004820152601760248201527f456e74726f70792061646472657373206e6f74207365740000000000000000006044820152606490fd5b34610576576060366003190112610576576119e9612669565b60249081356119f661267f565b90601a549260ff841615611e64578115611e0e57611a1c60ff600d5460a01c161561277a565b6001600160a01b0390811693338514611dd2576040516370a0823160e01b808252306004830152602094909260081c8416919085828a81865afa91821561099c57600092611da1575b50611a74919230903390612b46565b8383601a5460081c1692886040518095819382523060048301525afa801561099c57600090611d72575b611aa892506127e5565b928181168015908115611d68575b5015611d62575033925b60065490611ace828261286e565b918215611d0657611adf908361288e565b91600e5490612710918203828111611cf157611afa9161288e565b9784871696876000526002875260406000209160028301805460ff811615611c3d575b5050505091611bd2611bca7fd72c70202ab87b3549553b1d4ceb2a632c83cb96fa2dfe65c30282862fe11ade9796959385611b5c8d611bda985461276d565b9055611b6a8c600c5461276d565b600c55611bc181611b7d600e548861288e565b04918c158015918e91611c3557611b966011548a61288e565b045b611ba281866127e5565b92611baf86600f5461276d565b600f55611c06575b505060105461276d565b601055846127e5565b600b5461276d565b600b556127e5565b80611bed575b50506040519485523394a4005b611bff913390601a5460081c16612af4565b8580611be0565b611c2b9160005260138c526040600020611c2182825461276d565b905560125461276d565b6012558c8f611bb7565b506000611b98565b6004546019541115611cb45760ff1916600117905560045490600160401b82101561136357507fd72c70202ab87b3549553b1d4ceb2a632c83cb96fa2dfe65c30282862fe11ade97969593611bda9593611ca7611bd2946103ee856001611bca9701600455612736565b9395819597989950611b1d565b60405162461bcd60e51b8152600481018b90526016818501527513585e081d5cd95c881b1a5b5a5d081c995858da195960521b6044820152606490fd5b89634e487b7160e01b60005260116004526000fd5b60405162461bcd60e51b815260048101869052602f818a01527f496e73756666696369656e7420616d6f756e7420666f72206d696e696d756d2060448201526e7469636b657420707572636861736560881b6064820152608490fd5b92611ac0565b9050331487611ab6565b508382813d8311611d9a575b611d8881836126ab565b8101031261057657611aa89151611a9e565b503d611d7e565b91508582813d8311611dcb575b611db881836126ab565b8101031261057657611a74915191611a65565b503d611dae565b60405162461bcd60e51b8152602060048201526015818801527421b0b73737ba103932b332b9103cb7bab939b2b63360591b6044820152606490fd5b60405162461bcd60e51b8152602060048201526029818701527f496e76616c696420707572636861736520616d6f756e742c206d75737420626560448201526820706f73697469766560b81b6064820152608490fd5b60405162461bcd60e51b815260206004820152601e818701527f50757263686173696e67207469636b657473206e6f7420616c6c6f77656400006044820152606490fd5b604036600319011261057657611ebc612669565b602490813567ffffffffffffffff8111610576573660238201121561057657806004013591611eea836126cd565b611ef760405191826126ab565b83815260209384820193368783830101116105765781600092888893018737830101526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081163081149081156120a5575b506117d257611f5d612ad3565b6040516352d1902d60e01b8152908316948082600481895afa918291600093612075575b5050611f9f57604051634c9c8ce360e01b8152600481018690528690fd5b8490867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918281036120605750843b1561204a575080546001600160a01b03191682179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511561203057506000610ae39381925190845af461202a6127f2565b9161331c565b925050503461203b57005b63b398979f60e01b8152600490fd5b604051634c9c8ce360e01b815260048101849052fd5b60405190632a87526960e21b82526004820152fd5b9080929350813d831161209e575b61208d81836126ab565b810103126105765751908780611f81565b503d612083565b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5416141587611f50565b34610576576000366003190112610576576020601954604051908152f35b34610576576020366003190112610576576001600160a01b03612112612669565b1660005260036020526080604060002080549060018101549060ff6003600283015492015416916040519384526020840152604083015215156060820152f35b3461057657600036600319011261057657602060ff600d5460a01c166040519015158152f35b34610576576000366003190112610576576020601554604051908152f35b34610576576000366003190112610576576016546040516001600160a01b039091168152602090f35b34610576576000366003190112610576576020601b54604051908152f35b34610576576020366003190112610576576121f6612ad3565b600435601c55005b3461057657600036600319011261057657602060ff601a54166040519015158152f35b34610576576000366003190112610576576020601c54604051908152f35b6020806003193601126105765761225b6008546007549061276d565b421061245257600d5461227460ff8260a01c161561277a565b60ff60a01b1916600160a01b17600d55600054600154604051631711922960e31b81526001600160a01b03918216600482015290929182908290602490829087165afa801561099c576001600160801b0391600091612435575b5016918234106123dd57819083341161237d575b60448160005416916001541660405195869384926319cb825f60e01b8452600484015260043560248401525af1801561099c57612342575b337f826f6f38165cfdebf966078f0436bc3e414e3972837815771126691a3faa7daa600080a2005b81813d8311612376575b61235681836126ab565b81010312610576575167ffffffffffffffff81160361057657808061231a565b503d61234c565b9050600080808061238e87346127e5565b335af16123996127f2565b50156123a65781906122e2565b60405162461bcd60e51b815260048101839052600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260048101839052602a60248201527f496e73756666696369656e742067617320746f2067656e65726174652072616e6044820152693237b690373ab6b132b960b11b6064820152608490fd5b61244c9150833d8511610fc757610fb981836126ab565b846122ce565b6084906040519062461bcd60e51b82526004820152602260248201527f4a61636b706f742063616e206f6e6c792062652072756e206f6e636520612064604482015261617960f01b6064820152fd5b34610576576000366003190112610576576020600f54604051908152f35b34610576576000366003190112610576576020600e54604051908152f35b3461057657600036600319011261057657600d546040516001600160a01b039091168152602090f35b346105765760203660031901126105765761251f612ad3565b600435600755005b34610576576000366003190112610576576020601054604051908152f35b3461057657600036600319011261057657336000526013602052604060002054156125c4573360005260136020526040600020600081549155612596813360018060a01b03601a5460081c16612af4565b6040519081527fd637c0db1643ba2f0205c1f2dd21d9f30bda04ed307d74527e6592f1f43f435d60203392a2005b60405162461bcd60e51b815260206004820152601c60248201527f4e6f20726566657272616c206665657320746f207769746864726177000000006044820152606490fd5b3461057657602036600319011261057657612622612ad3565b600435600655005b34610576576000366003190112610576576020600654604051908152f35b3461057657602036600319011261057657612661612ad3565b600435600a55005b600435906001600160a01b038216820361057657565b604435906001600160a01b038216820361057657565b602435906001600160a01b038216820361057657565b90601f8019910116810190811067ffffffffffffffff821117610c7c57604052565b67ffffffffffffffff8111610c7c57601f01601f191660200190565b6005548110156127205760056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00190600090565b634e487b7160e01b600052603260045260246000fd5b6004548110156127205760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b9190820180921161094d57565b1561278157565b60405162461bcd60e51b815260206004820152601d60248201527f4a61636b706f742069732063757272656e746c792072756e6e696e67210000006044820152606490fd5b9081602091031261057657516001600160801b03811681036105765790565b9190820391821161094d57565b3d1561281d573d90612803826126cd565b9161281160405193846126ab565b82523d6000602084013e565b606090565b1561282957565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c6964207269736b2070657263656e746167650000000000000000006044820152606490fd5b8115612878570490565b634e487b7160e01b600052601260045260246000fd5b8181029291811591840414171561094d57565b156128a857565b60405162461bcd60e51b815260206004820152601060248201526f4c50206973206e6f742061637469766560801b6044820152606490fd5b156128e757565b60405162461bcd60e51b81526020600482015260126024820152711314081a5b99195e081b9bdd08199bdd5b9960721b6044820152606490fd5b600554801561294f5760001901612937816126e9565b81549060018060a01b039060031b1b19169055600555565b634e487b7160e01b600052603160045260246000fd5b600033815260039060036020526040812091600383019182549261298b60ff85166128a1565b6001936001860154612a9257828654968160028201555560ff19169055600019928192600554935b848110612a5f575b5050506129cc6000198414156128e0565b6000198201918211612a4b57506103ee612a07612a1d936129ed86946126e9565b90546001600160a01b039460039290921b1c8416916126e9565b612a0f612921565b3390601a5460081c16612af4565b6040519081527febd480b822209fc7890cbdf5b21417b4aa0db6d18f10f47afc87c12d227b90e060203392a2565b634e487b7160e01b81526011600452602490fd5b612a68816126e9565b905490831b1c6001600160a01b03163314612a845782016129b3565b9294505050913880806129bb565b5050928392506002915001557fd71ab63e9df325a911adc1b0732eb4baca8d0218e79bcd112acec661f33fa962339180a2565b604d811161094d57600a0a90565b600080516020613380833981519152546001600160a01b0316330361100957565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610c7c57612b4492604052612c0d565b565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117610c7c57612b4492604052612c0d565b6000805160206133a083398151915280546001600160a01b031990811690915560008051602061338083398151915280549182166001600160a01b0393841690811790915591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b906000602091828151910182855af11561099c576000513d612c6057506001600160a01b0381163b155b612c3e5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612c37565b42600855600c5415612f1957612c7d6130da565b600b54600954908111612e0e5750612cb97f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8291600c549061320b565b6001600160a01b03612d4d81612cce846132aa565b1692836001600160601b0360a01b600d541617600d55600b5493600052600260205260406000209360018501612d0582825461276d565b9055612d0f612fb8565b60085493600d5416945491604051958695869192608093969594919660a0840197845260018060a01b03166020840152604083015260608201520152565b0390a15b60005b600454811015612d995780612d6a600192612736565b838060a01b0391549060031b1c166000526002806020526040600020600081550160ff19815416905501612d54565b50600454600060045580612dca575b506000600b5560006009556000600c556000600f556000601255612b44613020565b60046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b908101905b818110612e025750612da8565b60008155600101612df5565b6127109081810291818304149015171561094d577f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8291612e54612e5a926006549061286e565b9061320b565b600c548111612ec1576001600160a01b03612eb981612e78846132aa565b1692836001600160601b0360a01b600d541617600d5560095493600052600260205260406000209360018501612eaf82825461276d565b9055612d0f613220565b0390a1612d51565b600d80546001600160a01b031916905560a090612edc613220565b612ee4612fb8565b60085490600180841b03600d5416906009549160405193845260208401526040830152606082015260006080820152a1612d51565b507f3208da215cdfa0c44cf3d81565b27f57d4c505bf1a48e40957e53aaf3ba2aa8260a0600954604051904282526000602083015260006040830152606082015260006080820152a1612f6a612fb8565b6000600955612b44613020565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c1615612fa657565b604051631afcd79f60e31b8152600490fd5b6000805b60055481101561301c578082612fd36001936126e9565b905490600391858060a01b0391831b1c1682528060205260ff604083209182015416613002575b505001612fbc565b838101906130128254825461276d565b9055558238612ffa565b5050565b6000805b60055481101561301c578061303a6001926126e9565b905490600391848060a01b0391831b1c169081855260209080825260409060ff8288209182015416613071575b5050505001613024565b7f14d1e9852fb8075cc7cf65ab53df7e7110c775fdc60cc33026d2871bd8bd8a91928154906130c560646130a960028601548561288e565b048093818b87015560096130be83825461276d565b90556127e5565b8093558351928352820152a238808080613067565b60098054156131f2576014546001600160a01b03919082161515806131e4575b6131bd575b60009160005b6005548110156131a95781613119826126e9565b919054600392831b1c166000528060205260ff60406000209182015416613144575b50600101613105565b6131a2906001929561318f60105461318961318361317b613171601b549461316b86612ac5565b9061288e565b898801549061288e565b8a549061286e565b91612ac5565b9061286e565b9161319b83825461276d565b905561276d565b939061313b565b5050506131b8906010546127e5565b601055565b6131dc6010546131d1600a820480926127e5565b60105560155461276d565b6015556130ff565b50601054601c5411156130fa565b50613201601054600b5461276d565b600b556000601055565b811561287857066001810180911161094d5790565b60098054156132a7576000805b6005548110156132a257806132436001926126e9565b905490600391848060a01b0391831b1c1684528060205260ff604085209182015416613271575b500161322d565b61329a613293600b5461318961318361317b613171601b549461316b86612ac5565b825461276d565b90553861326a565b505050565b50565b60008091600454925b8381106132ce5750506016546001600160a01b031692915050565b6133026132da82612736565b905460039190911b1c6001600160a01b0316600081815260026020526040902054909461276d565b928383111561331457506001016132b3565b935050505090565b90613343575080511561333157805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580613376575b613354575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561334c56fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00a2646970667358221220c80869c4bbbfb9813d968e2de4afd702d5aaa161f33d8bebcb1d518212cd88ca64736f6c63430008170033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "initialize(address,address,address,uint256)": {
        "details": "Initializes the contract with required parameters",
        "params": {
          "_entropyAddress": "Address of the Entropy contract for randomness",
          "_initialOwnerAddress": "Initial owner address (should be different from deployer)",
          "_ticketPrice": "Price of a single ticket (will be multiplied by token decimals)",
          "_token": "Address of the ERC20 token to use for tickets and rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6518,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "entropy",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IEntropy)10131"
      },
      {
        "astId": 6520,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "entropyProvider",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6534,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "usersInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(User)6708_storage)"
      },
      {
        "astId": 6539,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lpsInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(LP)6529_storage)"
      },
      {
        "astId": 6542,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "activeUserAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6545,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "activeLpAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6547,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6549,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "roundDurationInSeconds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6551,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lastJackpotEndTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 6553,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lpPoolTotal",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6555,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lpPoolCap",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6557,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "userPoolTotal",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6559,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "ticketCountTotalBps",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6561,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lastWinnerAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 6563,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "jackpotLock",
        "offset": 20,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 6565,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "entropyCallbackLock",
        "offset": 21,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 6567,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "feeBps",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6569,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "allFeesTotal",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6571,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lpFeesTotal",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6573,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "referralFeeBps",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6575,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "referralFeesTotal",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6579,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "referralFeesClaimable",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6581,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "protocolFeeAddress",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 6583,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "protocolFeeClaimable",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 6585,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "fallbackWinner",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 6587,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "lpLimit",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 6589,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "minLpDeposit",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 6591,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "userLimit",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 6593,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "allowPurchasing",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 6596,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "token",
        "offset": 1,
        "slot": "26",
        "type": "t_contract(IERC20)2116"
      },
      {
        "astId": 6598,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 6600,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "protocolFeeThreshold",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 6604,
        "contract": "contracts/BaseJackpot.sol:BaseJackpot",
        "label": "__gap",
        "offset": 0,
        "slot": "29",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2116": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEntropy)10131": {
        "encoding": "inplace",
        "label": "contract IEntropy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(LP)6529_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseJackpot.LP)",
        "numberOfBytes": "32",
        "value": "t_struct(LP)6529_storage"
      },
      "t_mapping(t_address,t_struct(User)6708_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseJackpot.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6708_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LP)6529_storage": {
        "encoding": "inplace",
        "label": "struct BaseJackpot.LP",
        "members": [
          {
            "astId": 6522,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6524,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "stake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6526,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "riskPercentage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6528,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(User)6708_storage": {
        "encoding": "inplace",
        "label": "struct BaseJackpot.User",
        "members": [
          {
            "astId": 6703,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "ticketsPurchasedTotalBps",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6705,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "winningsClaimable",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6707,
            "contract": "contracts/BaseJackpot.sol:BaseJackpot",
            "label": "active",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}